{"articles":[{"title":"Godot and consoles, all you need to know","link":"https://godotengine.org/article/godot-consoles-all-you-need-know","pubDate":"Fri, 15 Jul 2022 00:00:00 +0000","content":"<p>The subject of running Godot games on consoles pops up very often. In this article you will find information about the following topics:</p>\n<ul>\n<li>How console development works.</li>\n<li>The challenges that Godot faces for supporting those platforms.</li>\n<li>Which alternatives exist to publish your Godot games for consoles.</li>\n</ul>\n<h3>What is the consoles market like?</h3>\n<p>While platforms like Steam are very easy to publish for, the reality is that most of the revenue from independent developers generally comes from consoles (this, of course, speaking of devs not focusing on mobile).</p>\n<p>Consoles are cheap, easy to get access to, and have a wide catalog of first and third party titles, making them ideal devices for players wanting to spend their time and money on games.</p>\n<h3>How does one develop for consoles?</h3>\n<p>Unfortunately, consoles are entirely closed ecosystems. This means that there is a very simple rule that must be followed in order to develop for them: <strong>Unless you sign an NDA</strong> (Non Disclosure Agreement) and the manufacturer approves you, it is <strong>impossible for you to obtain any kind of information</strong> in regards to how they work (and much less publish games).</p>\n<p>This means that, on the whole public Internet, <strong>you will not be able to find</strong> (legally, at least):</p>\n<ul>\n<li>Any <strong>detailed public documentation</strong> on how consoles work (that was not reverse engineered).</li>\n<li>Any <strong>official tools or libraries</strong> that let you develop or run your game on consoles.</li>\n<li>Any <strong>downloadable game engines</strong> that, out of the box, include support for developing or exporting to consoles. </li>\n</ul>\n<p>This <strong>includes game engines such as Unity or Unreal</strong>. To obtain the console versions of those, you <strong>must get licensed</strong>, sign the NDA, get approved and then download the version that lets you develop on consoles from a secret console development portal. It is a common misconception that you can download a game engine and start using it to develop for consoles without previously being approved by the console manufacturer.</p>\n<p>The only exception at some point was exporting to the UWP platform which <em>could</em> run on XBox, but it had limited access to the console internals and was eventually deprecated by Microsoft.</p>\n<h3>Where does Godot fit is in all this?</h3>\n<p>Godot is a free and open source (FOSS) game engine, published under the MIT license. Development is made entirely in the open. Because of this, it <strong>is impossible for Godot to include first-party console support</strong> out of the box. Even if someone would contribute it, we simply <strong>could not host this code</strong> legally in our Git repository for anyone to use. </p>\n<p>Additionally, it would <strong>not be possible to distribute</strong> this code under the same license that Godot uses (MIT) because this is in direct conflict with the proprietary licenses and non-disclosure terms that console manufacturers require to have access to the knowledge needed to write this code.</p>\n<p>To make it simple, it <strong>is not possible for Godot</strong> to support consoles as an open source project.</p>\n<h3>Can it be done in secrecy?</h3>\n<p>Some projects such as <a href=\"https://www.libsdl.org/\">LibSDL</a>, <a href=\"https://haxe.org/\">Haxe</a>, <a href=\"https://www.monogame.net/\">Monogame</a>, <a href=\"https://www.cocos.com/\">Cocos</a> or <a href=\"https://defold.com/\">Defold</a> developed console ports behind closed doors and offer them to licensed developers for free, so the question arises often about whether Godot can do this too.</p>\n<p>The answer is that, Godot is not in the same situation, because:</p>\n<ul>\n<li>Godot is orders of magnitude more complex than any of those projects. Porting the platform layer can be relatively simple, but <strong>porting the rendering engine</strong> and making sure it works well is extremely laborious. Hiring talent that can do this properly can be in the order of hundred thousands of US dollars. Given consoles are exclusively a commercial market, It is very unlikely that anyone would do this for free if it can't be made open source afterwards.</li>\n<li>Additionally, save for SDL (which is the simplest of them all given its just a platform layer), all the other projects are actually <strong>developed by companies</strong> with an actual business model, such as the Haxe Foundation (which is actually a company), Microsoft, Cocos China, or King for Defold (then Refold).</li>\n</ul>\n<p>Godot <strong>is not developed by a company</strong>. It is a pure open source project developed by individuals entirely in the open, so it has <strong>no alternate business model</strong> to sustain the cost of developing console ports at loss.</p>\n<p>Additionally, the difficulties <strong>do not end there</strong>. Obtaining the source code for console development can be useful for some independent developers, mainly those who are strong in technology, but this is not how console manufacturers prefer to work.</p>\n<p>In consoles, any technology that is offered to develop titles for them must be an <strong>official, licensed middleware</strong>. This means that, for companies to use them, they require that:</p>\n<ul>\n<li>It must <strong>support the platform efficiently</strong> (the port must be optimized for it).</li>\n<li>It must <strong>support the platform APIs</strong>, such as save files, online APIs, peripherals, dedicated hardware, etc as best as possible.</li>\n<li>There must be <strong>some level of technical support</strong> for companies using the technology in the platform.</li>\n</ul>\n<p>Unless the above points are met, obtaining official middleware category is not possible, which means that most companies will still not be able to port their Godot games to consoles, even if they can get the source code.</p>\n<p>In all, supporting consoles properly <strong>is very costly</strong> and beyond the possibilities of Godot as a project to do so.</p>\n<h3>So, how do I get my Godot game into consoles anyway?</h3>\n<p>The best way to do this right now is to work with companies that will port and publish your Godot game to consoles. Because these companies act as the publishers, they are <strong>not required to license the technology to you</strong> (and thus avoid the costly process of becoming middleware providers). For most independent developers also, porting to consoles is not easy because they need to meet a lot of technical requirements, so working with a company that does for them is generally still desired. </p>\n<p>Links to companies that do console porting for Godot titles:</p>\n<ul>\n<li><a href=\"https://lonewolftechnology.com/\">Lone Wolf Technology</a></li>\n<li><a href=\"https://pineapple.works/\">Pineapple Works</a></li>\n<li><a href=\"https://gotm.io/about/gpp\">GOTM</a></li>\n<li><a href=\"https://www.flynnsarcades.com/\">Flynn's Arcade</a></li>\n</ul>\n<p>Most smaller studios working on games with Unity and Unreal also rely on third party companies to ensure that their ports are done properly and pass all the console comformance requirements.</p>\n<p>The last alternative is to do the console ports yourself. This is what Sega did for Sonic Colors Ultimate, but only large studios with a strong technical background are assumed to be able to do it.</p>\n<h3>Future</h3>\n<p>One can only wish that, as consoles nowadays are almost nothing more than <a href=\"https://www.amd.com/en/technologies/rdna\">openly documented</a> stock hardware (very distant from the specialized hardware that we saw until the PS3/Wii era), the secrecy requirements are going to be eased at some point in the future. Efforts can be seen from Nintendo and Microsoft in this direction already.</p>\n<p>Still, until (if) this happens, it is possible that some of the existing (or new) companies that specialize in Godot for consoles may become licensed Godot middleware providers, but it must be clear that this <strong>is a very costly process</strong> so they will need to make revenue somehow and adoption will depend on the strategy they take towards independent and corporate entities.</p>\n<p>Hoping that this dissipates most of the doubts regarding to Godot on consoles. If you have further questions, let us know!</p>","contentSnippet":"The subject of running Godot games on consoles pops up very often. In this article you will find information about the following topics:\nHow console development works.\nThe challenges that Godot faces for supporting those platforms.\nWhich alternatives exist to publish your Godot games for consoles.\nWhat is the consoles market like?\nWhile platforms like Steam are very easy to publish for, the reality is that most of the revenue from independent developers generally comes from consoles (this, of course, speaking of devs not focusing on mobile).\nConsoles are cheap, easy to get access to, and have a wide catalog of first and third party titles, making them ideal devices for players wanting to spend their time and money on games.\nHow does one develop for consoles?\nUnfortunately, consoles are entirely closed ecosystems. This means that there is a very simple rule that must be followed in order to develop for them: Unless you sign an NDA (Non Disclosure Agreement) and the manufacturer approves you, it is impossible for you to obtain any kind of information in regards to how they work (and much less publish games).\nThis means that, on the whole public Internet, you will not be able to find (legally, at least):\nAny detailed public documentation on how consoles work (that was not reverse engineered).\nAny official tools or libraries that let you develop or run your game on consoles.\nAny downloadable game engines that, out of the box, include support for developing or exporting to consoles. \nThis includes game engines such as Unity or Unreal. To obtain the console versions of those, you must get licensed, sign the NDA, get approved and then download the version that lets you develop on consoles from a secret console development portal. It is a common misconception that you can download a game engine and start using it to develop for consoles without previously being approved by the console manufacturer.\nThe only exception at some point was exporting to the UWP platform which could run on XBox, but it had limited access to the console internals and was eventually deprecated by Microsoft.\nWhere does Godot fit is in all this?\nGodot is a free and open source (FOSS) game engine, published under the MIT license. Development is made entirely in the open. Because of this, it is impossible for Godot to include first-party console support out of the box. Even if someone would contribute it, we simply could not host this code legally in our Git repository for anyone to use. \nAdditionally, it would not be possible to distribute this code under the same license that Godot uses (MIT) because this is in direct conflict with the proprietary licenses and non-disclosure terms that console manufacturers require to have access to the knowledge needed to write this code.\nTo make it simple, it is not possible for Godot to support consoles as an open source project.\nCan it be done in secrecy?\nSome projects such as LibSDL, Haxe, Monogame, Cocos or Defold developed console ports behind closed doors and offer them to licensed developers for free, so the question arises often about whether Godot can do this too.\nThe answer is that, Godot is not in the same situation, because:\nGodot is orders of magnitude more complex than any of those projects. Porting the platform layer can be relatively simple, but porting the rendering engine and making sure it works well is extremely laborious. Hiring talent that can do this properly can be in the order of hundred thousands of US dollars. Given consoles are exclusively a commercial market, It is very unlikely that anyone would do this for free if it can't be made open source afterwards.\nAdditionally, save for SDL (which is the simplest of them all given its just a platform layer), all the other projects are actually developed by companies with an actual business model, such as the Haxe Foundation (which is actually a company), Microsoft, Cocos China, or King for Defold (then Refold).\nGodot is not developed by a company. It is a pure open source project developed by individuals entirely in the open, so it has no alternate business model to sustain the cost of developing console ports at loss.\nAdditionally, the difficulties do not end there. Obtaining the source code for console development can be useful for some independent developers, mainly those who are strong in technology, but this is not how console manufacturers prefer to work.\nIn consoles, any technology that is offered to develop titles for them must be an official, licensed middleware. This means that, for companies to use them, they require that:\nIt must support the platform efficiently (the port must be optimized for it).\nIt must support the platform APIs, such as save files, online APIs, peripherals, dedicated hardware, etc as best as possible.\nThere must be some level of technical support for companies using the technology in the platform.\nUnless the above points are met, obtaining official middleware category is not possible, which means that most companies will still not be able to port their Godot games to consoles, even if they can get the source code.\nIn all, supporting consoles properly is very costly and beyond the possibilities of Godot as a project to do so.\nSo, how do I get my Godot game into consoles anyway?\nThe best way to do this right now is to work with companies that will port and publish your Godot game to consoles. Because these companies act as the publishers, they are not required to license the technology to you (and thus avoid the costly process of becoming middleware providers). For most independent developers also, porting to consoles is not easy because they need to meet a lot of technical requirements, so working with a company that does for them is generally still desired. \nLinks to companies that do console porting for Godot titles:\nLone Wolf Technology\nPineapple Works\nGOTM\nFlynn's Arcade\nMost smaller studios working on games with Unity and Unreal also rely on third party companies to ensure that their ports are done properly and pass all the console comformance requirements.\nThe last alternative is to do the console ports yourself. This is what Sega did for Sonic Colors Ultimate, but only large studios with a strong technical background are assumed to be able to do it.\nFuture\nOne can only wish that, as consoles nowadays are almost nothing more than openly documented stock hardware (very distant from the specialized hardware that we saw until the PS3/Wii era), the secrecy requirements are going to be eased at some point in the future. Efforts can be seen from Nintendo and Microsoft in this direction already.\nStill, until (if) this happens, it is possible that some of the existing (or new) companies that specialize in Godot for consoles may become licensed Godot middleware providers, but it must be clear that this is a very costly process so they will need to make revenue somehow and adoption will depend on the strategy they take towards independent and corporate entities.\nHoping that this dissipates most of the doubts regarding to Godot on consoles. If you have further questions, let us know!","guid":"https://godotengine.org/article/godot-consoles-all-you-need-know","isoDate":"2022-07-15T00:00:00.000Z"},{"title":"Dev snapshot: Godot 4.0 alpha 12","link":"https://godotengine.org/article/dev-snapshot-godot-4-0-alpha-12","pubDate":"Thu, 14 Jul 2022 21:06:14 +0000","content":"<p>Another couple of weeks, another alpha snapshot from the development branch, this time with <strong>4.0 alpha 12</strong>! Same deal as usual, lots of bugs fixed and more refactoring and feature work. We're etching closer and closer to the beta stage, things are starting to fall into place!</p>\n<p>Some noteworthy changes in this release:</p>\n<ul>\n<li>Grouping annotations for exported variables in GDScript (<code>@export_group</code>).</li>\n<li>Full support for Android scoped storage (also in 3.5 RCs).</li>\n<li>Font resource refactoring.</li>\n<li>Lots of GDScript 2.0 bugs squashed.</li>\n</ul>\n<p>Be aware that during the alpha stage the engine is still not feature-complete or stable. <strong>There will likely be breaking changes between this release and the first <a href=\"https://en.wikipedia.org/wiki/Software_release_life_cycle#Beta\"><em>beta</em> release</a>.</strong> Only the beta will mark the so-called &quot;feature freeze&quot;.</p>\n<p>As such, we do not recommend porting existing projects to this and other upcoming alpha releases unless you are prepared to do it again to fix future incompatibilities. However, if you can port some existing projects and demos to the new version, that may provide a lot of useful information about critical issues still left to fix.</p>\n<p>Most importantly: <strong>Make backups before opening any existing project in Godot 4.0 alpha builds.</strong> There is no easy way back once a project has been (partially) converted.</p>\n<p><a href=\"#downloads\">Jump to the <strong>Downloads</strong> section.</a></p>\n<h2>What's new</h2>\n<p>If you're interested in an overview of what's new in Godot 4.0 alpha in general, have a look at the detailed release notes for <a href=\"/article/dev-snapshot-godot-4-0-alpha-1\">4.0 alpha 1</a>. In this alpha 12 blog post, we will only cover the main changes since the previous alpha release.</p>\n<p>See the <a href=\"https://github.com/godotengine/godot/compare/afdae67cc381bb340da2e864279da6b836804b7f...2c11e6d9efc42370a8d7537eaff8b1ea78a283e5\"><strong>changelog on GitHub</strong></a> for an overview of all changes since 4.0 alpha 11 (129 commits – excluding merge commits ― from 54 contributors).</p>\n<p>Some of the most notables feature changes in this update are:</p>\n<ul>\n<li>2D: Account for relative Z indices when Y-sorting (<a href=\"https://github.com/godotengine/godot/pull/62837\">GH-62837</a>).</li>\n<li>3D: Add <code>global_position</code> and <code>global_rotation</code> to Node3D (<a href=\"https://github.com/godotengine/godot/pull/50755\">GH-50755</a>).</li>\n<li>Android: Add full support for Android scoped storage (<a href=\"https://github.com/godotengine/godot/pull/62459\">GH-62459</a>).</li>\n<li>Android: Refactor Custom Build options in export preset (<a href=\"https://github.com/godotengine/godot/pull/62611\">GH-62611</a>).</li>\n<li>Core: Implement a BitField hint (<a href=\"https://github.com/godotengine/godot/pull/62374\">GH-62374</a>).</li>\n<li>Core: Allow parsing of invalid UTF-16 surrogates and some non-standard UTF-8 variants, make Unicode parse errors more verbose (<a href=\"https://github.com/godotengine/godot/pull/62735\">GH-62735</a>).</li>\n<li>Core: Add static methods for creating Image and ImageTexture (<a href=\"https://github.com/godotengine/godot/pull/60739\">GH-60739</a>).</li>\n<li>Editor: Show the transform operation numbers in 2D viewport (<a href=\"https://github.com/godotengine/godot/pull/62539\">GH-62539</a>).</li>\n<li>Editor: Improve visibility of <code>code</code>, <code>codeblock</code>, <code>kbd</code> and clickable references in editor help (<a href=\"https://github.com/godotengine/godot/pull/62710\">GH-62710</a>).</li>\n<li>GDScript: Add grouping annotations for class properties (<a href=\"https://github.com/godotengine/godot/pull/62707\">GH-62707</a>).</li>\n<li>GDScript: Add support for documenting built-in annotations (<a href=\"https://github.com/godotengine/godot/pull/62713\">GH-62713</a>).</li>\n<li>GDScript: Lots of bug fixes (<a href=\"https://github.com/godotengine/godot/pulls?q=is%3Apr+sort%3Aupdated-desc+label%3Atopic%3Agdscript+is%3Amerged+merged%3A2022-07-01..2022-07-14\">13 merged PRs</a>).</li>\n<li>GUI: Refactor Font configuration and import UI, and Font resources (<a href=\"https://github.com/godotengine/godot/pull/62108\">GH-62108</a>).</li>\n<li>GUI: Refactor ColorPicker codebase (<a href=\"https://github.com/godotengine/godot/pull/62075\">GH-62075</a>).</li>\n<li>GUI: Add <code>root_subfolder</code> to FileDialog (<a href=\"https://github.com/godotengine/godot/pull/59089\">GH-59089</a>).</li>\n<li>Import: Fix various bugs in the advanced scene import (<a href=\"https://github.com/godotengine/godot/pull/59834\">GH-59834</a>).</li>\n<li>Import: Fix light intensity and attenuation import from glTF (<a href=\"https://github.com/godotengine/godot/pull/62747\">GH-62747</a>).</li>\n<li>Import: Add support for 64-bit IEEE float WAV audio samples (<a href=\"https://github.com/godotengine/godot/pull/61168\">GH-61168</a>).</li>\n<li>Input: Re-enable input accumulation by default (<a href=\"https://github.com/godotengine/godot/pull/62665\">GH-62665</a>).</li>\n<li>Input: Add inversion/eraser-end property for tablet pens (<a href=\"https://github.com/godotengine/godot/pull/62212\">GH-62212</a>).</li>\n<li>iOS: Flush accumulated input events (<a href=\"https://github.com/godotengine/godot/pull/62843\">GH-62843</a>).</li>\n<li>macOS: Use statically linked MoltenVK by default, automatically detect MoltenVK SDK install (<a href=\"https://github.com/godotengine/godot/pull/62669\">GH-62669</a>).</li>\n<li>macOS: Improve file association handling, and allow URL schema handling (<a href=\"https://github.com/godotengine/godot/pull/62808\">GH-62808</a>).</li>\n</ul>\n<p>This release is built from commit <a href=\"https://github.com/godotengine/godot/commit/2c11e6d9efc42370a8d7537eaff8b1ea78a283e5\">2c11e6d9e</a>.</p>\n<p><a id=\"downloads\"></a></p>\n<h2>Downloads</h2>\n<p>The downloads for this dev snapshot can be found directly on our repository:</p>\n<ul>\n<li><a href=\"https://downloads.tuxfamily.org/godotengine/4.0/alpha12/\">Standard build</a> (GDScript, GDExtension, VisualScript).</li>\n<li>Mono builds are currently not available as our focus is on porting to .NET 6. You'll get a chance to test it with later alpha releases!</li>\n</ul>\n<h2>Known issues</h2>\n<p>As we are still in the alpha phase of development, there are still many issues to fix, some of which have already been reported and are being worked on.</p>\n<p>See the GitHub issue tracker for a list of <a href=\"https://github.com/godotengine/godot/issues?q=is%3Aissue+is%3Aopen+milestone%3A4.0+label%3Abug+\">known bugs in the 4.0 milestone</a>.</p>\n<h2>Bug reports</h2>\n<p>As a tester, you are encouraged to <a href=\"https://github.com/godotengine/godot/issues\">open bug reports</a> if you experience issues with 4.0 alpha 12. Please check first the <a href=\"https://github.com/godotengine/godot/issues\">existing issues on GitHub</a>, using the search function with relevant keywords, to ensure that the bug you experience is not known already.</p>\n<p>As in any major release there are going to be compatibility breaking changes. However, we still try to provide a migration path for your projects. If you experience a regression without a known migration path or workaround, do not hesitate to report it.</p>\n<h2>Support</h2>\n<p>Godot is a non-profit, open source game engine developed by hundreds of contributors on their free time, and a handful of part or full-time developers, hired thanks to <a href=\"https://godotengine.org/donate\">donations from the Godot community</a>. A big thankyou to everyone who has contributed <a href=\"https://github.com/godotengine/godot/blob/master/AUTHORS.md\">their time</a> or <a href=\"https://github.com/godotengine/godot/blob/master/DONORS.md\">financial support</a> to the project!</p>\n<p>If you'd like to support the project financially and help us secure our future hires, you can do so on <a href=\"https://www.patreon.com/godotengine\">Patreon</a> or <a href=\"https://godotengine.org/donate\">PayPal</a>.</p>","contentSnippet":"Another couple of weeks, another alpha snapshot from the development branch, this time with 4.0 alpha 12! Same deal as usual, lots of bugs fixed and more refactoring and feature work. We're etching closer and closer to the beta stage, things are starting to fall into place!\nSome noteworthy changes in this release:\nGrouping annotations for exported variables in GDScript (@export_group).\nFull support for Android scoped storage (also in 3.5 RCs).\nFont resource refactoring.\nLots of GDScript 2.0 bugs squashed.\nBe aware that during the alpha stage the engine is still not feature-complete or stable. There will likely be breaking changes between this release and the first beta release. Only the beta will mark the so-called \"feature freeze\".\nAs such, we do not recommend porting existing projects to this and other upcoming alpha releases unless you are prepared to do it again to fix future incompatibilities. However, if you can port some existing projects and demos to the new version, that may provide a lot of useful information about critical issues still left to fix.\nMost importantly: Make backups before opening any existing project in Godot 4.0 alpha builds. There is no easy way back once a project has been (partially) converted.\nJump to the Downloads section.\nWhat's new\nIf you're interested in an overview of what's new in Godot 4.0 alpha in general, have a look at the detailed release notes for 4.0 alpha 1. In this alpha 12 blog post, we will only cover the main changes since the previous alpha release.\nSee the changelog on GitHub for an overview of all changes since 4.0 alpha 11 (129 commits – excluding merge commits ― from 54 contributors).\nSome of the most notables feature changes in this update are:\n2D: Account for relative Z indices when Y-sorting (GH-62837).\n3D: Add global_position and global_rotation to Node3D (GH-50755).\nAndroid: Add full support for Android scoped storage (GH-62459).\nAndroid: Refactor Custom Build options in export preset (GH-62611).\nCore: Implement a BitField hint (GH-62374).\nCore: Allow parsing of invalid UTF-16 surrogates and some non-standard UTF-8 variants, make Unicode parse errors more verbose (GH-62735).\nCore: Add static methods for creating Image and ImageTexture (GH-60739).\nEditor: Show the transform operation numbers in 2D viewport (GH-62539).\nEditor: Improve visibility of code, codeblock, kbd and clickable references in editor help (GH-62710).\nGDScript: Add grouping annotations for class properties (GH-62707).\nGDScript: Add support for documenting built-in annotations (GH-62713).\nGDScript: Lots of bug fixes (13 merged PRs).\nGUI: Refactor Font configuration and import UI, and Font resources (GH-62108).\nGUI: Refactor ColorPicker codebase (GH-62075).\nGUI: Add root_subfolder to FileDialog (GH-59089).\nImport: Fix various bugs in the advanced scene import (GH-59834).\nImport: Fix light intensity and attenuation import from glTF (GH-62747).\nImport: Add support for 64-bit IEEE float WAV audio samples (GH-61168).\nInput: Re-enable input accumulation by default (GH-62665).\nInput: Add inversion/eraser-end property for tablet pens (GH-62212).\niOS: Flush accumulated input events (GH-62843).\nmacOS: Use statically linked MoltenVK by default, automatically detect MoltenVK SDK install (GH-62669).\nmacOS: Improve file association handling, and allow URL schema handling (GH-62808).\nThis release is built from commit 2c11e6d9e.\n\nDownloads\nThe downloads for this dev snapshot can be found directly on our repository:\nStandard build (GDScript, GDExtension, VisualScript).\nMono builds are currently not available as our focus is on porting to .NET 6. You'll get a chance to test it with later alpha releases!\nKnown issues\nAs we are still in the alpha phase of development, there are still many issues to fix, some of which have already been reported and are being worked on.\nSee the GitHub issue tracker for a list of known bugs in the 4.0 milestone.\nBug reports\nAs a tester, you are encouraged to open bug reports if you experience issues with 4.0 alpha 12. Please check first the existing issues on GitHub, using the search function with relevant keywords, to ensure that the bug you experience is not known already.\nAs in any major release there are going to be compatibility breaking changes. However, we still try to provide a migration path for your projects. If you experience a regression without a known migration path or workaround, do not hesitate to report it.\nSupport\nGodot is a non-profit, open source game engine developed by hundreds of contributors on their free time, and a handful of part or full-time developers, hired thanks to donations from the Godot community. A big thankyou to everyone who has contributed their time or financial support to the project!\nIf you'd like to support the project financially and help us secure our future hires, you can do so on Patreon or PayPal.","guid":"https://godotengine.org/article/dev-snapshot-godot-4-0-alpha-12","isoDate":"2022-07-14T21:06:14.000Z"},{"title":"Release candidate: Godot 3.5 RC 6","link":"https://godotengine.org/article/release-candidate-godot-3-5-rc-6","pubDate":"Fri, 08 Jul 2022 08:55:26 +0000","content":"<p>The upcoming <strong>Godot 3.5</strong> is now considered feature complete, and has received a lot of bugfixes and improvements over the past weeks thanks to all the testers and developers who reported and fixed issues. We are now at the <a href=\"https://en.wikipedia.org/wiki/Software_release_life_cycle#Release_candidate\"><strong>Release Candidate</strong></a> stage, finalizing everything so that we can release 3.5-stable for all users.</p>\n<p>At this stage we need people to test this release (and potential follow-up RCs) on as many projects as possible, to make sure that we catch non-obvious regressions that might have gone unnoticed until now. If you run into any issue, please make sure to <a href=\"https://github.com/godotengine/godot/issues\">report it on GitHub</a> so that we can know about it and fix it!</p>\n<p>This RC 6 has a few notable changes compared to the previous build:</p>\n<ul>\n<li>In RC 4, async shader compilation and caching was enabled by default on desktop, but several users reported issues with it on some hardware. We switched it back to disabled by default for all platforms. You can enable it in the Project Settings (<code>rendering/gles3/shaders/shader_compilation_mode</code>).</li>\n<li>In 3.4, input accumulation was mistakenly turned off, and we only realized this regression after 3.4 had had multiple maintenance releases. In this build we turned it back on by default, which should be beneficial for most projects, aside from those that need very precise input (multiple mouse motion events per frame). You can toggle it with <code>Input.set_use_accumulated_input()</code>.</li>\n<li>Fixes to Android scoped storage support added in RC 5.</li>\n</ul>\n<p><a href=\"#downloads\">Jump to the <strong>Downloads</strong> section.</a></p>\n<p>As usual, you can try it live with the <a href=\"https://editor.godotengine.org/3.5.rc6/\"><strong>online version of the Godot editor</strong></a> updated for this release.</p>\n<h2>Highlights</h2>\n<p>The main changes coming in Godot 3.5 and included in this release candidate are:</p>\n<h3>Asynchronous shader compilation + caching (ubershader) (<a href=\"https://github.com/godotengine/godot/pull/53411\">GH-53411</a>)</h3>\n<p>A long awaited solution to shader compilation stuttering on OpenGL, courtesy Pedro J. Estébanez (<a href=\"https://github.com/RandomShaper\">RandomShaper</a>)!</p>\n<p>This new system uses an &quot;ubershader&quot; (big shader supporting all features, slow but compiled on startup) to fill in for all shaders initially while the more efficient and material-specific shaders get compiled asynchronously, and cached for future runs.</p>\n<p>This means that the first time a material is used under certain conditions (types of lights, shadowing enabled or not, etc.) rendering may be slower for a second or two, but the slowdown will not be nearly as bad as the typical hiccup caused by classic synchronous compilation. On the most powerful devices it may be even unnoticeable. Please test this thoroughly and let us know how it performs on your projects.</p>\n<p>This feature is disabled by default, and can be enabled in the Project Settings.</p>\n<h3>Add NavigationServer with obstacle avoidance using RVO2 (<a href=\"https://github.com/godotengine/godot/pull/48395\">GH-48395</a>)</h3>\n<p>Jake Young (<a href=\"https://github.com/Duroxxigar\">Duroxxigar</a>) backported the refactored and much improved navigation system that Andrea Catania (<a href=\"https://github.com/AndreaCatania\">AndreaCatania</a>) implemented for <a href=\"https://github.com/godotengine/godot/pull/34776\">Godot 4.0</a> back in 2020! Then <a href=\"https://github.com/smix8\">smix8</a> took over the custody of this area, fixing a lot of bugs and improving the feature set greatly, with the help of Pawel Lampe (<a href=\"https://github.com/Scony\">Scony</a>).</p>\n<p>The new NavigationServer adds support for obstacle avoidance using the RVO2 library, and navigation meshes can now be baked at runtime. The whole API is now a lot more flexible than it used to be.</p>\n<p>The backport was done while attempting to preserve API compatibility within reason, but the underlying behavior will change, mainly to provide <em>a lot</em> more features and flexibility. We expect that all users will happily move to the new NavigationServer, but please report issues if you see behavior changes for the worse when upgrading from 3.4.</p>\n<h3>Physics interpolation (3D) (<a href=\"https://github.com/godotengine/godot/pull/52846\">GH-52846</a>)</h3>\n<p>In Godot, while physics runs at a fixed tick rate, frames can actually display at a wide variety of frame rates, depending on the player's hardware. This can lead to a problem, when the movement of objects (which tends to occur on physics ticks) does not line up with the rendered frames, giving unsightly jitter.</p>\n<p>Thanks to <a href=\"https://github.com/lawnjelly\">lawnjelly</a>'s expertise, you will now find a sweet new option hidden in the project settings. Switch on <code>physics/common/physics_interpolation</code>, and Godot will now automatically interpolate objects on rendered frames so they look super smooth.</p>\n<p>In order to benefit you should be moving your objects and running your game logic in <code>_physics_process()</code>. This ensures your game will run the same on all machines. <a href=\"https://docs.godotengine.org/en/3.5/tutorials/physics/interpolation/index.html\">Full details are available in the updated docs</a>.</p>\n<p>Fixed timestep interpolation is 3D only for now, but watch this space as we plan to add 2D support after initial feedback and bugfixing on the 3D version.</p>\n<h3>OccluderShapePolygon (3D) (<a href=\"https://github.com/godotengine/godot/pull/57361\">GH-57361</a>)</h3>\n<p>Following on from the addition of <a href=\"/article/godot-3-4-is-released#portal-occlusion-culling\">OccluderShapeSphere in 3.4</a>, lawnjelly now brings us a more adaptable and easy way to add basic occlusion culling in the form of the OccluderShapePolygon. Add an Occluder node to your scene, and choose to create an OccluderShapePolygon. This should show up initially as a quad.</p>\n<p>You can move the polygon with the node transform, drag the corners to reshape it, add delete points. Anything behind the polygon will be culled from view.</p>\n<p>It is really as simple as that to get started, place them wherever you like in your game level. <a href=\"https://docs.godotengine.org/en/3.5/tutorials/3d/occluders.html#occludershapepolygon\">Read the updated docs for details</a>.</p>\n<h3>Android editor port (<a href=\"https://github.com/godotengine/godot/pull/57747/\">GH-57747</a>)</h3>\n<p>Two years ago (!), <a href=\"https://github.com/thebestnom\">thebestnom</a> started working on an Android port of the Godot editor (<a href=\"https://github.com/godotengine/godot/pull/36776\">GH-36776</a>). Since the Godot editor is built with Godot itself, it wasn't too difficult to imagine compiling the editor for Android with some buildsystem changes. But a lot of work was needed to actually make this compiled version work decently on an Android device, with improved mouse and keyboard support, better touch input, as well as being able to run the project on top of the editor like on desktop.</p>\n<p>With a lot of testing from interested users, things progressed slowly but steadily, and our Android maintainer Fredia Huya-Kouadio (<a href=\"https://github.com/m4gr3d\">m4gr3d</a>) put the finishing touches to get this work merged for Godot 3.5 (<a href=\"https://github.com/godotengine/godot/pull/57747/\">GH-57747</a>). The current version doesn't have a lot of mobile specific changes, so it's only really usable on a tablet with keyboard and mouse - but the foundation is there to improve upon, and we're interested in your feedback and ideas son how to make the Godot experience more mobile friendly!</p>\n<p>From now on you'll find builds of the Android editor as <code>&lt;godot_version&gt;_android_editor.apk</code> in the download repository. Note that builds are currently not signed, so you will get a warning on install. <a href=\"https://downloads.tuxfamily.org/godotengine/3.5/beta3/Godot_v3.5-beta3_android_editor.apk\"><strong>Give it a try!</strong></a></p>\n<p>With <a href=\"https://github.com/godotengine/godot/pull/55604#issuecomment-1077590602\">helpful input</a> from contributors Dan Edwards (<a href=\"https://github.com/Gromph\">Gromph</a>) and Péter Magyar (<a href=\"https://github.com/Relintai\">Relintai</a>), Fredia was also able to fix the low processor usage mode on Android (<a href=\"https://github.com/godotengine/godot/pull/59606\">GH-59606</a>), which the editor port uses. It should now work fine for users who make non-game applications or non real-time games on Android and want to preserve battery life.</p>\n<p><a id=\"label3d\"></a></p>\n<h3>New Label3D and TextMesh backported from Godot 4.0 (<a href=\"https://github.com/godotengine/godot/pull/61276\">GH-61276</a>, <a href=\"https://github.com/godotengine/godot/pull/61281\">GH-61281</a>)</h3>\n<p>Long awaited, Godot now provides a Label3D node out of the box to display text in 3D scenes. And for more advanced use cases, there is now also TextMesh to generate 3D meshes from font glyphs, so you can add Word Art to your scenes ;)</p>\n<p>Both features were implemented by our text rendering expert <a href=\"https://github.com/bruvzg\">bruvzg</a> in the <code>master</code> branch for Godot 4.0, and backported to 3.5.</p>\n<h3>New SceneTreeTween backported from Godot 4.0 (<a href=\"https://github.com/godotengine/godot/pull/60581\">GH-60581</a>)</h3>\n<p>Tomasz Chabora (<a href=\"https://github.com/KoBeWi\">KoBeWi</a>) completely overhauled the Tween class in Godot 4.0 to make it a lot more powerful and flexible. Early testers so far seemed to like, and Haoyu Qiu (<a href=\"https://github.com/timothyqiu\">timothyqiu</a>) decided to backport the feature to Godot 3.5 as <code>SceneTreeTween</code> (to keep the pre-existing <code>Tween</code> and thus preserve compatibility). So you now have two separate Tween implementations and can use to keep using the original 3.x one, or adopt the new API from 4.0.</p>\n<h3>Scene unique nodes (<a href=\"https://github.com/godotengine/godot/pull/60527\">GH-60527</a>)</h3>\n<p>To help with the common task of accessing specific nodes from scripts, Juan Linietsky (<a href=\"https://github.com/reduz\">reduz</a>) added the concept of &quot;scene unique names&quot; for nodes in the <code>master</code> branch (<a href=\"https://github.com/godotengine/godot/pull/60298\">GH-60298</a>), and Tomasz backported it for 3.5. Nodes with a scene unique name can be referenced easily within their scene using a new <code>%</code> name prefix, like so: <code>get_node(\"%MyUniqueNode\")</code>. This is particularly useful for GUI if you need to locate a specific Control node which might move in the scene tree as you refactor things.</p>\n<h3>Add push, pull, fetch and improved diff view to VCS UI (<a href=\"https://github.com/godotengine/godot/pull/53900\">GH-53900</a>)</h3>\n<p>Aged like fine wine, Meru Patel (<a href=\"https://github.com/Janglee123\">Janglee123</a>)'s work from <a href=\"https://godotengine.org/article/gsoc-2020-progress-report-1#vcs-improvements\">Google Summer of Code 2020</a> has been continued and updated by <a href=\"https://godotengine.org/article/gsoc-2019-progress-report-3#vcsch-integration\">GSoC 2019 alumni</a> Twarit Waikar (<a href=\"https://github.com/ChronicallySerious\">ChronicallySerious</a>)!</p>\n<p>What is it? A lot of new features for Version Control Systems (VCS) integration in the Godot editor, such as push, pull, and fetch operations, as well as a very nice diff view UI. All these features have been implemented in the official <a href=\"https://github.com/godotengine/godot-git-plugin\">Git integration plugin</a>. Check out the <a href=\"https://github.com/godotengine/godot-git-plugin/releases\">Releases page</a> for the latest 2.x plugin release supporting Godot 3.5.</p>\n<h3>And more!</h3>\n<ul>\n<li>3D: Add Label3D node and Sprite3D material render priority (<a href=\"https://github.com/godotengine/godot/pull/61276\">GH-61276</a>).</li>\n<li>3D: Add TextMesh and expose dynamic font vector outlines (<a href=\"https://github.com/godotengine/godot/pull/61281\">GH-61281</a>).</li>\n<li>3D: Add <code>process_mode</code> property to InterpolatedCamera (<a href=\"https://github.com/godotengine/godot/pull/41402\">GH-41402</a>).</li>\n<li>Android: Initial port of the Godot editor (<a href=\"https://github.com/godotengine/godot/pull/57747\">GH-57747</a>).</li>\n<li>Android: Add full support for Android scoped storage (<a href=\"https://github.com/godotengine/godot/pull/51815\">GH-51815</a>).</li>\n<li>Android: Upgrade Android NDK to r23 LTS (<a href=\"https://github.com/godotengine/godot/pull/61692\">GH-61692</a>).</li>\n<li>Android: Fix flickering issues with low processor mode (<a href=\"https://github.com/godotengine/godot/pull/59606\">GH-59606</a>).</li>\n<li>Android: Update editor default display scale, allow resizing windows (<a href=\"https://github.com/godotengine/godot/pull/59868\">GH-59868</a>, <a href=\"https://github.com/godotengine/godot/pull/59861\">GH-59861</a>, <a href=\"https://github.com/godotengine/godot/pull/59880\">GH-59880</a>).</li>\n<li>Android: Fix the logic to restart the Godot application (<a href=\"https://github.com/godotengine/godot/pull/61332\">GH-61332</a>).</li>\n<li>Android: Fix broken scroll gesture on UI (<a href=\"https://github.com/godotengine/godot/pull/62290\">GH-62290</a>).</li>\n<li>Animation: Add option to paste animation as duplicate (<a href=\"https://github.com/godotengine/godot/pull/60226\">GH-60226</a>).</li>\n<li>Animation: New SceneTreeTween backported from Godot 4.0 (<a href=\"https://github.com/godotengine/godot/pull/60581\">GH-60581</a>).</li>\n<li>Animation: Fix AnimatedSprite doesn't emit <code>animation_finished</code> when changing playback direction (<a href=\"https://github.com/godotengine/godot/pull/61085\">GH-61085</a>).</li>\n<li>Audio: Allow configuring loop mode on WAV import (<a href=\"https://github.com/godotengine/godot/pull/59170\">GH-59170</a>).</li>\n<li>Audio: Add support for 64-bit IEEE float WAV encoding (<a href=\"https://github.com/godotengine/godot/pull/61169\">GH-61169</a>).</li>\n<li>Audio: Instance audio streams before <code>AudioServer::lock</code> call (<a href=\"https://github.com/godotengine/godot/pull/59413\">GH-59413</a>).</li>\n<li>Audio: Fix crash in AudioServer when switching audio devices with different audio channels count (<a href=\"https://github.com/godotengine/godot/pull/59778\">GH-59778</a>).</li>\n<li>C#: Fix Android AAB export failing to load native libs (<a href=\"https://github.com/godotengine/godot/pull/57420\">GH-57420</a>).</li>\n<li>Core: Add scene unique nodes (<a href=\"https://github.com/godotengine/godot/pull/60527\">GH-60527</a>).</li>\n<li>Core: Add GradientTexture2D (<a href=\"https://github.com/godotengine/godot/pull/54824\">GH-54824</a>).</li>\n<li>Core: Allow pinning property values + Consistent property defaults (<a href=\"https://github.com/godotengine/godot/pull/52943\">GH-52943</a>).</li>\n<li>Core: Support deep comparison of Array and Dictionary (<a href=\"https://github.com/godotengine/godot/pull/42625\">GH-42625</a>).</li>\n<li>Core: Add visibility to CanvasLayer (<a href=\"https://github.com/godotengine/godot/pull/57900\">GH-57900</a>).</li>\n<li>Core: Add a signal to notify when children nodes enter or exit tree (<a href=\"https://github.com/godotengine/godot/pull/57541\">GH-57541</a>).</li>\n<li>Core: Add fill method to Array and Pool*Array (<a href=\"https://github.com/godotengine/godot/pull/60426\">GH-60426</a>).</li>\n<li>Core: Expose <code>OS.move_to_trash()</code> (<a href=\"https://github.com/godotengine/godot/pull/60542\">GH-60542</a>).</li>\n<li>Core: Crash handler: Use print_error to include backtrace in logs (<a href=\"https://github.com/godotengine/godot/pull/60782\">GH-60782</a>).</li>\n<li>Core: Allow AStar/AStar2D with zero point weight (<a href=\"https://github.com/godotengine/godot/pull/60812\">GH-60812</a>).</li>\n<li>Core: Add search methods for pool arrays (<a href=\"https://github.com/godotengine/godot/pull/60856\">GH-60856</a>).</li>\n<li>Core: Add interpolation modes to Gradient (<a href=\"https://github.com/godotengine/godot/pull/60982\">GH-60982</a>).</li>\n<li>Debugger: Fix inspecting nested dictionaries/arrays (<a href=\"https://github.com/godotengine/godot/pull/60737\">GH-60737</a>).</li>\n<li>Debugger: Add <code>--debug-server</code> command line option to listen for incoming connections (<a href=\"https://github.com/godotengine/godot/pull/60819\">GH-60819</a>).</li>\n<li>Editor: Add push, pull, fetch and improved diff view to VCS UI (<a href=\"https://github.com/godotengine/godot/pull/53900\">GH-53900</a>).</li>\n<li>Editor: Improve ColorPicker presets (<a href=\"https://github.com/godotengine/godot/pull/54439\">GH-54439</a>).</li>\n<li>Editor: Add option to only redraw vital updates (<a href=\"https://github.com/godotengine/godot/pull/53463\">GH-53463</a>).</li>\n<li>Editor: Improved region-select in the 3D editor viewport (<a href=\"https://github.com/godotengine/godot/pull/58252\">GH-58252</a>).</li>\n<li>Editor: Make property paths and categories translatable (<a href=\"https://github.com/godotengine/godot/pull/58634\">GH-58634</a>).</li>\n<li>Editor: Add property name style toggle to Inspector (<a href=\"https://github.com/godotengine/godot/pull/59313\">GH-59313</a>).</li>\n<li>Editor: Add an inspector preview for BitMap (<a href=\"https://github.com/godotengine/godot/pull/60700\">GH-60700</a>).</li>\n<li>Editor: Create <code>onready</code> variables when dropping nodes and holding Ctrl (<a href=\"https://github.com/godotengine/godot/pull/60879\">GH-60879</a>).</li>\n<li>Editor: Only switch to node when node dragging it (<a href=\"https://github.com/godotengine/godot/pull/61162\">GH-61162</a>).</li>\n<li>Editor: Fix editor-only visibility for lights (<a href=\"https://github.com/godotengine/godot/pull/62335\">GH-62335</a>).</li>\n<li>Export: Improve embedded PCK loading and exporting (<a href=\"https://github.com/godotengine/godot/pull/60580\">GH-60580</a>).</li>\n<li>Export: Add readable export errors (<a href=\"https://github.com/godotengine/godot/pull/61624\">GH-61624</a>).</li>\n<li>GDNative: Add Core API 1.3 with <code>Pool*Array</code> <code>sort</code> and <code>has</code>, and <code>PoolStringArray.join</code> (<a href=\"https://github.com/godotengine/godot/pull/55650\">GH-55650</a>, <a href=\"https://github.com/godotengine/godot/pull/55826\">GH-55826</a>).</li>\n<li>GDScript: Fix variable type inference on release (<a href=\"https://github.com/godotengine/godot/pull/57851\">GH-57851</a>).</li>\n<li>GDScript: Don't coerce default values to the export hint type (<a href=\"https://github.com/godotengine/godot/pull/58686\">GH-58686</a>).</li>\n<li>GDScript: Enable method type information on release builds (<a href=\"https://github.com/godotengine/godot/pull/59793\">GH-59793</a>).</li>\n<li>GDScript: Fix autocompletion showing core class names with an underscore (<a href=\"https://github.com/godotengine/godot/pull/62731\">GH-62731</a>).</li>\n<li>GDScript: LSP: Fix wrong parentheses for function call autocompletion (<a href=\"https://github.com/godotengine/godot/pull/59482\">GH-59482</a>).</li>\n<li>GUI: Add FlowContainer (<a href=\"https://github.com/godotengine/godot/pull/57960\">GH-57960</a>).</li>\n<li>GUI: Add alignment options to Button icons (<a href=\"https://github.com/godotengine/godot/pull/57771\">GH-57771</a>).</li>\n<li>GUI: Add type variations to Theme (<a href=\"https://github.com/godotengine/godot/pull/57942\">GH-57942</a>).</li>\n<li>GUI: Add WOFF2 font support and brotli decoder (<a href=\"https://github.com/godotengine/godot/pull/59522\">GH-59522</a>).</li>\n<li>GUI: Add a Skew property to StyleBoxFlat (<a href=\"https://github.com/godotengine/godot/pull/60592\">GH-60592</a>).</li>\n<li>GUI: Make various improvements to OptionButton (<a href=\"https://github.com/godotengine/godot/pull/61102\">GH-61102</a>).</li>\n<li>GUI: Improve RichTextLabel table filling (<a href=\"https://github.com/godotengine/godot/pull/61904\">GH-61904</a>).</li>\n<li>HTML5: Enable mbedTLS module for Crypto object (<a href=\"https://github.com/godotengine/godot/pull/61402\">GH-61402</a>).</li>\n<li>HTML5: Add preliminary support for GDNative+Threads build (<a href=\"https://github.com/godotengine/godot/pull/61989\">GH-61989</a>).\n<ul>\n<li>Depends on cutting edge Emscripten 3.1.14, no templates provided for this export type for now.</li>\n</ul></li>\n<li>Import: glTF: Fix light intensity and attenuation import (<a href=\"https://github.com/godotengine/godot/pull/62747\">GH-62747</a>).</li>\n<li>Input: Re-enable input accumulation disabled by error in 3.4 (<a href=\"https://github.com/godotengine/godot/pull/62826\">GH-62826</a>).</li>\n<li>Input: Allow for mapping scancodes to current layout (<a href=\"https://github.com/godotengine/godot/pull/56015\">GH-56015</a>).</li>\n<li>Internationalization: Add binary MO translation file support (<a href=\"https://github.com/godotengine/godot/pull/59522\">GH-59522</a>).</li>\n<li>Linux: Fix <code>window_maximized</code> not working reliably (<a href=\"https://github.com/godotengine/godot/pull/59767\">GH-59767</a>).</li>\n<li>Linux: Read and store joypad events in a separate thread (<a href=\"https://github.com/godotengine/godot/pull/56126\">GH-56126</a>).</li>\n<li>macOS: Implements ad-hoc signing from Linux/Windows (<a href=\"https://github.com/godotengine/godot/pull/51550\">GH-51550</a>).</li>\n<li>Navigation: Add NavigationServer with obstacle avoidance using RVO2 (<a href=\"https://github.com/godotengine/godot/pull/48395\">GH-48395</a>).</li>\n<li>Navigation: Lots of fixes and improvements to the new NavigationServer (<a href=\"https://github.com/godotengine/godot/pulls?q=is%3Apr+sort%3Aupdated-desc+label%3Atopic%3Anavigation+merged%3A2022-05-01..2022-06-27+is%3Aclosed\"><code>topic:navigation</code> PRs</a>).</li>\n<li>Navigation: Backport more NavigationServer features to make it more flexible (<a href=\"https://github.com/godotengine/godot/pull/61996\">GH-61996</a>).</li>\n<li>Networking: Add proxy support for HTTPClient and the editor (<a href=\"https://github.com/godotengine/godot/pull/55988\">GH-55988</a>).</li>\n<li>Physics: Add fixed timestep interpolation for 3D (<a href=\"https://github.com/godotengine/godot/pull/52846\">GH-52846</a>).\n<ul>\n<li>The 2D equivalent will be added later on.</li>\n</ul></li>\n<li>Physics: Bullet: KinematicBody compound shape collision fix (<a href=\"https://github.com/godotengine/godot/pull/56801\">GH-56801</a>).\n<ul>\n<li>Fixes <em>a lot</em> of issues with KinematicBody collisions at the intersection between meshes when using Bullet. This was merged fairly late (3.5 RC 2), please make sure to test it.</li>\n</ul></li>\n<li>Physics: Bullet: Do not set gravity and damping when Custom Integrator is enabled (<a href=\"https://github.com/godotengine/godot/pull/62708\">GH-62708</a>).</li>\n<li>Rendering: Asynchronous shader compilation + caching (ubershader) (<a href=\"https://github.com/godotengine/godot/pull/53411\">GH-53411</a>).</li>\n<li>Rendering: Add <code>material_overlay</code> property to MeshInstance (<a href=\"https://github.com/godotengine/godot/pull/50823\">GH-50823</a>).</li>\n<li>Rendering: Faster editor line drawing - Path2D and <code>draw_line</code> (<a href=\"https://github.com/godotengine/godot/pull/54377\">GH-54377</a>).</li>\n<li>Rendering: Add OccluderShapePolygon (<a href=\"https://github.com/godotengine/godot/pull/57361\">GH-57361</a>).</li>\n<li>Rendering: Add support for saving multiple Images in BakedLightmap (<a href=\"https://github.com/godotengine/godot/pull/58102\">GH-58102</a>).</li>\n<li>Rendering: Bind mesh merging functionality in MeshInstance (<a href=\"https://github.com/godotengine/godot/pull/57661\">GH-57661</a>).</li>\n<li>Rendering: GLES2: Unpack blend shape arrays when necessary (<a href=\"https://github.com/godotengine/godot/pull/60829\">GH-60829</a>).</li>\n<li>Rendering: GLES3: Unbind vertex buffer before calculating blend shapes (<a href=\"https://github.com/godotengine/godot/pull/60832\">GH-60832</a>).</li>\n<li>Rendering: Portals: Show gridmaps using global mode (<a href=\"https://github.com/godotengine/godot/pull/60851\">GH-60851</a>).</li>\n<li>Rendering: Fix viewport with transparent background changed to solid black if enabling FXAA or debanding (<a href=\"https://github.com/godotengine/godot/pull/54585\">GH-54585</a>).</li>\n<li>Rendering: VisibilityNotifier: Add <code>max_distance</code> feature (<a href=\"https://github.com/godotengine/godot/pull/61544\">GH-61544</a>).</li>\n<li>Rendering: CPU lightmapper: Account for ambient light settings when baking lights (<a href=\"https://github.com/godotengine/godot/pull/62260\">GH-62260</a>).</li>\n<li>Shaders: Many improvements backported from <code>master</code> (<a href=\"https://github.com/godotengine/godot/pull/56794\">GH-56794</a>).</li>\n<li>UWP: Fix exporting GDNative DLLs (<a href=\"https://github.com/godotengine/godot/pull/61262\">GH-61262</a>).</li>\n<li>VisualShader: Add hints and default values to the uniform nodes (<a href=\"https://github.com/godotengine/godot/pull/56466\">GH-56466</a>).</li>\n<li>Windows: Improve console handling and <code>execute</code> (<a href=\"https://github.com/godotengine/godot/pull/55987\">GH-55987</a>).\n<ul>\n<li>This changes the editor console handling to be like on Unix systems (Linux and macOS). So Godot doesn't open with a console by default, but you can see console output if you start it from a console yourself. You can <a href=\"https://github.com/godotengine/godot/pull/55987#issuecomment-996563579\">create a batch script or shortcut</a> to automatically start Godot from a console as in previous releases.</li>\n</ul></li>\n<li>Windows: Implement limited surrogate pairs support (better UTF-8 support, emoji fonts) (<a href=\"https://github.com/godotengine/godot/pull/54625\">GH-54625</a>).</li>\n<li>Windows: Try to convert <code>OS::execute()</code> output to Unicode (<a href=\"https://github.com/godotengine/godot/pull/60920\">GH-60920</a>).</li>\n<li>Windows: Add support for handling network share paths (<a href=\"https://github.com/godotengine/godot/pull/61985\">GH-61985</a>).</li>\n<li>Thirdparty library updates: bullet 3.24, freetype 2.12.1, pcre2 10.40, CA certificates (2022-03-31).</li>\n<li><a href=\"https://github.com/godotengine/build-containers/tree/3.5#toolchains\">Toolchains update for official builds</a>.</li>\n<li>Class reference and translations updates.</li>\n</ul>\n<p>All these need to be thoroughly tested to ensure that they work as intended in the upcoming 3.5-stable.</p>\n<h2>Changelog</h2>\n<p>You can check the full changelog since 3.4-stable (<a href=\"https://downloads.tuxfamily.org/godotengine/3.5/rc6/Godot_v3.5-rc6_changelog_chrono.txt\">chronological</a>, or <a href=\"https://downloads.tuxfamily.org/godotengine/3.5/rc6/Godot_v3.5-rc6_changelog_authors.txt\">for each contributor</a>).</p>\n<p>You can also review the <a href=\"https://github.com/godotengine/godot/compare/ae60597930a306097ddbc6e8ad49eb50471533b4...f05cecdc43ebfbe58ca9ed5b44fac888b4109dad\">changes between RC 5 and RC 6</a>.</p>\n<p>This release is built from commit <a href=\"https://github.com/godotengine/godot/commit/f05cecdc43ebfbe58ca9ed5b44fac888b4109dad\">f05cecdc4</a>.</p>\n<p><a id=\"downloads\"></a></p>\n<h2>Downloads</h2>\n<p>The downloads for this dev snapshot can be found directly on our repository:</p>\n<ul>\n<li><a href=\"https://downloads.tuxfamily.org/godotengine/3.5/rc6/\">Standard build</a> (GDScript, GDNative, VisualScript).</li>\n<li><a href=\"https://downloads.tuxfamily.org/godotengine/3.5/rc6/mono/\">Mono build</a> (C# support + all the above). You need to have dotnet CLI or MSBuild installed to use the Mono build. Relevant parts of Mono <strong>6.12.0.182</strong> are included in this build.</li>\n</ul>\n<h2>Bug reports</h2>\n<p>As a tester, you are encouraged to <a href=\"https://github.com/godotengine/godot/issues\">open bug reports</a> if you experience issues with this release candidate. Please check first the <a href=\"https://github.com/godotengine/godot/issues\">existing issues on GitHub</a>, using the search function with relevant keywords, to ensure that the bug you experience is not known already.</p>\n<p>In particular, any change that would cause a regression in your projects is very important to report (e.g. if something that worked fine in 3.4.x no longer works in this 3.5 RC).</p>\n<h2>Support</h2>\n<p>Godot is a non-profit, open source game engine developed by hundreds of contributors on their free time, and a handful of part or full-time developers, hired thanks to <a href=\"/donate\">donations from the Godot community</a>. A big thankyou to everyone who has contributed <a href=\"https://github.com/godotengine/godot/blob/master/AUTHORS.md\">their time</a> or <a href=\"https://github.com/godotengine/godot/blob/master/DONORS.md\">financial support</a> to the project!</p>\n<p>If you'd like to support the project financially and help us secure our future hires, you can do so on <a href=\"https://www.patreon.com/godotengine\">Patreon</a> or <a href=\"/donate\">PayPal</a>.</p>","contentSnippet":"The upcoming Godot 3.5 is now considered feature complete, and has received a lot of bugfixes and improvements over the past weeks thanks to all the testers and developers who reported and fixed issues. We are now at the Release Candidate stage, finalizing everything so that we can release 3.5-stable for all users.\nAt this stage we need people to test this release (and potential follow-up RCs) on as many projects as possible, to make sure that we catch non-obvious regressions that might have gone unnoticed until now. If you run into any issue, please make sure to report it on GitHub so that we can know about it and fix it!\nThis RC 6 has a few notable changes compared to the previous build:\nIn RC 4, async shader compilation and caching was enabled by default on desktop, but several users reported issues with it on some hardware. We switched it back to disabled by default for all platforms. You can enable it in the Project Settings (rendering/gles3/shaders/shader_compilation_mode).\nIn 3.4, input accumulation was mistakenly turned off, and we only realized this regression after 3.4 had had multiple maintenance releases. In this build we turned it back on by default, which should be beneficial for most projects, aside from those that need very precise input (multiple mouse motion events per frame). You can toggle it with Input.set_use_accumulated_input().\nFixes to Android scoped storage support added in RC 5.\nJump to the Downloads section.\nAs usual, you can try it live with the online version of the Godot editor updated for this release.\nHighlights\nThe main changes coming in Godot 3.5 and included in this release candidate are:\nAsynchronous shader compilation + caching (ubershader) (GH-53411)\nA long awaited solution to shader compilation stuttering on OpenGL, courtesy Pedro J. Estébanez (RandomShaper)!\nThis new system uses an \"ubershader\" (big shader supporting all features, slow but compiled on startup) to fill in for all shaders initially while the more efficient and material-specific shaders get compiled asynchronously, and cached for future runs.\nThis means that the first time a material is used under certain conditions (types of lights, shadowing enabled or not, etc.) rendering may be slower for a second or two, but the slowdown will not be nearly as bad as the typical hiccup caused by classic synchronous compilation. On the most powerful devices it may be even unnoticeable. Please test this thoroughly and let us know how it performs on your projects.\nThis feature is disabled by default, and can be enabled in the Project Settings.\nAdd NavigationServer with obstacle avoidance using RVO2 (GH-48395)\nJake Young (Duroxxigar) backported the refactored and much improved navigation system that Andrea Catania (AndreaCatania) implemented for Godot 4.0 back in 2020! Then smix8 took over the custody of this area, fixing a lot of bugs and improving the feature set greatly, with the help of Pawel Lampe (Scony).\nThe new NavigationServer adds support for obstacle avoidance using the RVO2 library, and navigation meshes can now be baked at runtime. The whole API is now a lot more flexible than it used to be.\nThe backport was done while attempting to preserve API compatibility within reason, but the underlying behavior will change, mainly to provide a lot more features and flexibility. We expect that all users will happily move to the new NavigationServer, but please report issues if you see behavior changes for the worse when upgrading from 3.4.\nPhysics interpolation (3D) (GH-52846)\nIn Godot, while physics runs at a fixed tick rate, frames can actually display at a wide variety of frame rates, depending on the player's hardware. This can lead to a problem, when the movement of objects (which tends to occur on physics ticks) does not line up with the rendered frames, giving unsightly jitter.\nThanks to lawnjelly's expertise, you will now find a sweet new option hidden in the project settings. Switch on physics/common/physics_interpolation, and Godot will now automatically interpolate objects on rendered frames so they look super smooth.\nIn order to benefit you should be moving your objects and running your game logic in _physics_process(). This ensures your game will run the same on all machines. Full details are available in the updated docs.\nFixed timestep interpolation is 3D only for now, but watch this space as we plan to add 2D support after initial feedback and bugfixing on the 3D version.\nOccluderShapePolygon (3D) (GH-57361)\nFollowing on from the addition of OccluderShapeSphere in 3.4, lawnjelly now brings us a more adaptable and easy way to add basic occlusion culling in the form of the OccluderShapePolygon. Add an Occluder node to your scene, and choose to create an OccluderShapePolygon. This should show up initially as a quad.\nYou can move the polygon with the node transform, drag the corners to reshape it, add delete points. Anything behind the polygon will be culled from view.\nIt is really as simple as that to get started, place them wherever you like in your game level. Read the updated docs for details.\nAndroid editor port (GH-57747)\nTwo years ago (!), thebestnom started working on an Android port of the Godot editor (GH-36776). Since the Godot editor is built with Godot itself, it wasn't too difficult to imagine compiling the editor for Android with some buildsystem changes. But a lot of work was needed to actually make this compiled version work decently on an Android device, with improved mouse and keyboard support, better touch input, as well as being able to run the project on top of the editor like on desktop.\nWith a lot of testing from interested users, things progressed slowly but steadily, and our Android maintainer Fredia Huya-Kouadio (m4gr3d) put the finishing touches to get this work merged for Godot 3.5 (GH-57747). The current version doesn't have a lot of mobile specific changes, so it's only really usable on a tablet with keyboard and mouse - but the foundation is there to improve upon, and we're interested in your feedback and ideas son how to make the Godot experience more mobile friendly!\nFrom now on you'll find builds of the Android editor as <godot_version>_android_editor.apk in the download repository. Note that builds are currently not signed, so you will get a warning on install. Give it a try!\nWith helpful input from contributors Dan Edwards (Gromph) and Péter Magyar (Relintai), Fredia was also able to fix the low processor usage mode on Android (GH-59606), which the editor port uses. It should now work fine for users who make non-game applications or non real-time games on Android and want to preserve battery life.\n\nNew Label3D and TextMesh backported from Godot 4.0 (GH-61276, GH-61281)\nLong awaited, Godot now provides a Label3D node out of the box to display text in 3D scenes. And for more advanced use cases, there is now also TextMesh to generate 3D meshes from font glyphs, so you can add Word Art to your scenes ;)\nBoth features were implemented by our text rendering expert bruvzg in the master branch for Godot 4.0, and backported to 3.5.\nNew SceneTreeTween backported from Godot 4.0 (GH-60581)\nTomasz Chabora (KoBeWi) completely overhauled the Tween class in Godot 4.0 to make it a lot more powerful and flexible. Early testers so far seemed to like, and Haoyu Qiu (timothyqiu) decided to backport the feature to Godot 3.5 as SceneTreeTween (to keep the pre-existing Tween and thus preserve compatibility). So you now have two separate Tween implementations and can use to keep using the original 3.x one, or adopt the new API from 4.0.\nScene unique nodes (GH-60527)\nTo help with the common task of accessing specific nodes from scripts, Juan Linietsky (reduz) added the concept of \"scene unique names\" for nodes in the master branch (GH-60298), and Tomasz backported it for 3.5. Nodes with a scene unique name can be referenced easily within their scene using a new % name prefix, like so: get_node(\"%MyUniqueNode\"). This is particularly useful for GUI if you need to locate a specific Control node which might move in the scene tree as you refactor things.\nAdd push, pull, fetch and improved diff view to VCS UI (GH-53900)\nAged like fine wine, Meru Patel (Janglee123)'s work from Google Summer of Code 2020 has been continued and updated by GSoC 2019 alumni Twarit Waikar (ChronicallySerious)!\nWhat is it? A lot of new features for Version Control Systems (VCS) integration in the Godot editor, such as push, pull, and fetch operations, as well as a very nice diff view UI. All these features have been implemented in the official Git integration plugin. Check out the Releases page for the latest 2.x plugin release supporting Godot 3.5.\nAnd more!\n3D: Add Label3D node and Sprite3D material render priority (GH-61276).\n3D: Add TextMesh and expose dynamic font vector outlines (GH-61281).\n3D: Add process_mode property to InterpolatedCamera (GH-41402).\nAndroid: Initial port of the Godot editor (GH-57747).\nAndroid: Add full support for Android scoped storage (GH-51815).\nAndroid: Upgrade Android NDK to r23 LTS (GH-61692).\nAndroid: Fix flickering issues with low processor mode (GH-59606).\nAndroid: Update editor default display scale, allow resizing windows (GH-59868, GH-59861, GH-59880).\nAndroid: Fix the logic to restart the Godot application (GH-61332).\nAndroid: Fix broken scroll gesture on UI (GH-62290).\nAnimation: Add option to paste animation as duplicate (GH-60226).\nAnimation: New SceneTreeTween backported from Godot 4.0 (GH-60581).\nAnimation: Fix AnimatedSprite doesn't emit animation_finished when changing playback direction (GH-61085).\nAudio: Allow configuring loop mode on WAV import (GH-59170).\nAudio: Add support for 64-bit IEEE float WAV encoding (GH-61169).\nAudio: Instance audio streams before AudioServer::lock call (GH-59413).\nAudio: Fix crash in AudioServer when switching audio devices with different audio channels count (GH-59778).\nC#: Fix Android AAB export failing to load native libs (GH-57420).\nCore: Add scene unique nodes (GH-60527).\nCore: Add GradientTexture2D (GH-54824).\nCore: Allow pinning property values + Consistent property defaults (GH-52943).\nCore: Support deep comparison of Array and Dictionary (GH-42625).\nCore: Add visibility to CanvasLayer (GH-57900).\nCore: Add a signal to notify when children nodes enter or exit tree (GH-57541).\nCore: Add fill method to Array and Pool*Array (GH-60426).\nCore: Expose OS.move_to_trash() (GH-60542).\nCore: Crash handler: Use print_error to include backtrace in logs (GH-60782).\nCore: Allow AStar/AStar2D with zero point weight (GH-60812).\nCore: Add search methods for pool arrays (GH-60856).\nCore: Add interpolation modes to Gradient (GH-60982).\nDebugger: Fix inspecting nested dictionaries/arrays (GH-60737).\nDebugger: Add --debug-server command line option to listen for incoming connections (GH-60819).\nEditor: Add push, pull, fetch and improved diff view to VCS UI (GH-53900).\nEditor: Improve ColorPicker presets (GH-54439).\nEditor: Add option to only redraw vital updates (GH-53463).\nEditor: Improved region-select in the 3D editor viewport (GH-58252).\nEditor: Make property paths and categories translatable (GH-58634).\nEditor: Add property name style toggle to Inspector (GH-59313).\nEditor: Add an inspector preview for BitMap (GH-60700).\nEditor: Create onready variables when dropping nodes and holding Ctrl (GH-60879).\nEditor: Only switch to node when node dragging it (GH-61162).\nEditor: Fix editor-only visibility for lights (GH-62335).\nExport: Improve embedded PCK loading and exporting (GH-60580).\nExport: Add readable export errors (GH-61624).\nGDNative: Add Core API 1.3 with Pool*Array sort and has, and PoolStringArray.join (GH-55650, GH-55826).\nGDScript: Fix variable type inference on release (GH-57851).\nGDScript: Don't coerce default values to the export hint type (GH-58686).\nGDScript: Enable method type information on release builds (GH-59793).\nGDScript: Fix autocompletion showing core class names with an underscore (GH-62731).\nGDScript: LSP: Fix wrong parentheses for function call autocompletion (GH-59482).\nGUI: Add FlowContainer (GH-57960).\nGUI: Add alignment options to Button icons (GH-57771).\nGUI: Add type variations to Theme (GH-57942).\nGUI: Add WOFF2 font support and brotli decoder (GH-59522).\nGUI: Add a Skew property to StyleBoxFlat (GH-60592).\nGUI: Make various improvements to OptionButton (GH-61102).\nGUI: Improve RichTextLabel table filling (GH-61904).\nHTML5: Enable mbedTLS module for Crypto object (GH-61402).\nHTML5: Add preliminary support for GDNative+Threads build (GH-61989).\n\nDepends on cutting edge Emscripten 3.1.14, no templates provided for this export type for now.\n\nImport: glTF: Fix light intensity and attenuation import (GH-62747).\nInput: Re-enable input accumulation disabled by error in 3.4 (GH-62826).\nInput: Allow for mapping scancodes to current layout (GH-56015).\nInternationalization: Add binary MO translation file support (GH-59522).\nLinux: Fix window_maximized not working reliably (GH-59767).\nLinux: Read and store joypad events in a separate thread (GH-56126).\nmacOS: Implements ad-hoc signing from Linux/Windows (GH-51550).\nNavigation: Add NavigationServer with obstacle avoidance using RVO2 (GH-48395).\nNavigation: Lots of fixes and improvements to the new NavigationServer (topic:navigation PRs).\nNavigation: Backport more NavigationServer features to make it more flexible (GH-61996).\nNetworking: Add proxy support for HTTPClient and the editor (GH-55988).\nPhysics: Add fixed timestep interpolation for 3D (GH-52846).\n\nThe 2D equivalent will be added later on.\n\nPhysics: Bullet: KinematicBody compound shape collision fix (GH-56801).\n\nFixes a lot of issues with KinematicBody collisions at the intersection between meshes when using Bullet. This was merged fairly late (3.5 RC 2), please make sure to test it.\n\nPhysics: Bullet: Do not set gravity and damping when Custom Integrator is enabled (GH-62708).\nRendering: Asynchronous shader compilation + caching (ubershader) (GH-53411).\nRendering: Add material_overlay property to MeshInstance (GH-50823).\nRendering: Faster editor line drawing - Path2D and draw_line (GH-54377).\nRendering: Add OccluderShapePolygon (GH-57361).\nRendering: Add support for saving multiple Images in BakedLightmap (GH-58102).\nRendering: Bind mesh merging functionality in MeshInstance (GH-57661).\nRendering: GLES2: Unpack blend shape arrays when necessary (GH-60829).\nRendering: GLES3: Unbind vertex buffer before calculating blend shapes (GH-60832).\nRendering: Portals: Show gridmaps using global mode (GH-60851).\nRendering: Fix viewport with transparent background changed to solid black if enabling FXAA or debanding (GH-54585).\nRendering: VisibilityNotifier: Add max_distance feature (GH-61544).\nRendering: CPU lightmapper: Account for ambient light settings when baking lights (GH-62260).\nShaders: Many improvements backported from master (GH-56794).\nUWP: Fix exporting GDNative DLLs (GH-61262).\nVisualShader: Add hints and default values to the uniform nodes (GH-56466).\nWindows: Improve console handling and execute (GH-55987).\n\nThis changes the editor console handling to be like on Unix systems (Linux and macOS). So Godot doesn't open with a console by default, but you can see console output if you start it from a console yourself. You can create a batch script or shortcut to automatically start Godot from a console as in previous releases.\n\nWindows: Implement limited surrogate pairs support (better UTF-8 support, emoji fonts) (GH-54625).\nWindows: Try to convert OS::execute() output to Unicode (GH-60920).\nWindows: Add support for handling network share paths (GH-61985).\nThirdparty library updates: bullet 3.24, freetype 2.12.1, pcre2 10.40, CA certificates (2022-03-31).\nToolchains update for official builds.\nClass reference and translations updates.\nAll these need to be thoroughly tested to ensure that they work as intended in the upcoming 3.5-stable.\nChangelog\nYou can check the full changelog since 3.4-stable (chronological, or for each contributor).\nYou can also review the changes between RC 5 and RC 6.\nThis release is built from commit f05cecdc4.\n\nDownloads\nThe downloads for this dev snapshot can be found directly on our repository:\nStandard build (GDScript, GDNative, VisualScript).\nMono build (C# support + all the above). You need to have dotnet CLI or MSBuild installed to use the Mono build. Relevant parts of Mono 6.12.0.182 are included in this build.\nBug reports\nAs a tester, you are encouraged to open bug reports if you experience issues with this release candidate. Please check first the existing issues on GitHub, using the search function with relevant keywords, to ensure that the bug you experience is not known already.\nIn particular, any change that would cause a regression in your projects is very important to report (e.g. if something that worked fine in 3.4.x no longer works in this 3.5 RC).\nSupport\nGodot is a non-profit, open source game engine developed by hundreds of contributors on their free time, and a handful of part or full-time developers, hired thanks to donations from the Godot community. A big thankyou to everyone who has contributed their time or financial support to the project!\nIf you'd like to support the project financially and help us secure our future hires, you can do so on Patreon or PayPal.","guid":"https://godotengine.org/article/release-candidate-godot-3-5-rc-6","isoDate":"2022-07-08T08:55:26.000Z"},{"title":"Fog Volumes arrive in Godot 4.0","link":"https://godotengine.org/article/fog-volumes-arrive-in-godot-4","pubDate":"Wed, 06 Jul 2022 09:00:00 +0000","content":"<p><em><strong>Note:</strong> FogVolumes are available in 4.0 alpha 1 and later. This post provides a technical overview for a feature that is already available in the current 4.0 alphas.</em></p>\n<hr />\n<p>On top of the existing non-volumetric fog, Godot 4.0 introduces a new type of fog: Volumetric Fog. For the 4.0 release, we decided to take Volumetric Fog one step further with the addition of FogVolumes. These allow users to dynamically place fog and control complex fog effects with shaders.</p>\n<p>This post starts off with a high-level description of what FogVolumes are and how to use them, and then includes some technical details about what is going on under the hood and how we get them to render so fast.</p>\n<video controls><source src=\"https://godotengine.org/storage/app/media/4.0/Fog%20Volumes/fog2.mp4\" type=\"video/mp4\"></source></video>\n<h2>Volumetric fog</h2>\n<p>Volumetric Fog uses a 3-dimensional buffer to calculate and store fog density values allowing fog to interact with light and shadows in a way that the previous non-volumetric fog never could. Volumetric Fog adds a new dimension of realism to 3D scenes. </p>\n<p>For example, here is a view of Crytek's popular Sponza scene (well, popular among graphics developers).</p>\n<p><img src=\"/storage/app/media/4.0/Fog%20Volumes/Screenshot%20from%202022-06-30%2023-00-05.png\" alt=\"Sponza scene without volumetric fog\" /></p>\n<p>Turning on Volumetric Fog, we can instantly make it a little more interesting!</p>\n<p><img src=\"/storage/app/media/4.0/Fog%20Volumes/Screenshot%20from%202022-06-30%2022-59-57.png\" alt=\"Sponza scene with volumetric fog\" /></p>\n<p>As you can see, Volumetric Fog responds to both light and shadow automatically. It also updates in real time! </p>\n<video controls><source src=\"https://godotengine.org/storage/app/media/4.0/Fog%20Volumes/fog4.mp4\" type=\"video/mp4\"></source></video>\n<p>By default, Volumetric Fog covers the entire scene with a uniform density, but sometimes specific effects call for having fog in only one portion of a scene (like in the above video). For that, you need FogVolumes.</p>\n<h2>FogVolume nodes</h2>\n<p>FogVolumes come in many different shapes, they can either be <em>boxes</em>, <em>ellipsoids</em>, <em>cones</em>, <em>cylinders</em>, or they can cover the whole <code>world</code>. Naturally, it is more efficient to use a <em>box</em>, <em>ellipsoid</em>, <em>cone</em>, or <em>cylinder</em> shape as they limit the region over which the fog is calculated.</p>\n<p>By default, FogVolumes add fog into the scene. The fog model we use internally is based on density, albedo, and emission which are all additive properties. This means that when FogVolumes overlap, we need only add the density, albedo, and emission from the respective FogVolumes and the results will look correct.</p>\n<p>The same goes for subtraction. You can use a negative density to subtract one volume from another to create more complex shapes if you need to, or if you need to keep fog from accumulating somewhere like in a house or other building.</p>\n<p><img src=\"https://godotengine.org/storage/app/uploads/public/61e/37d/a08/61e37da08bfed728225140.png\" alt=\"Complex fog volume shape created using a negative density volume\" /></p>\n<p>FogVolumes are 3D nodes that can be placed in the scene like other nodes and they immediately react to the existing lighting conditions and other objects in the scene. The only restriction is that Volumetric Fog must be enabled in the Environment for the FogVolumes to be visible.\nIf you wish to disable global volumetric fog but still want to have volumetric fog constrained within specific areas, enable Volumetric Fog and decrease its density to <code>0.0</code>.</p>\n<p>Pictured below is a FogVolume partially intersecting a light beam. As you can see, the beam of light penetrates through the volume in a plausible way.</p>\n<p><img src=\"/storage/app/media/4.0/Fog%20Volumes/Screenshot%20from%202022-06-30%2023-11-24.png\" alt=\"Spherical fog volume in Sponza scene intersecting a light beam\" /></p>\n<p>If you crank up the detail (not recommended for performance reasons), you can acheive very sharp-looking light shafts in a constrained area. You can also choose to decrease the maximum volumetric fog rendering distance to improve volumetric fog detail without incurring a performance cost.</p>\n<p><img src=\"/storage/app/media/4.0/Fog%20Volumes/Screenshot%20from%202022-06-30%2023-14-59.png\" alt=\"Sharp-looking light shafts in an ellipsoid in Sponza scene\" /></p>\n<p>At the default settings, the light still looks plausible, but not nearly as detailed. On the bright side, at default settings, Volumetric Fog and FogVolumes are efficient even on integrated GPUs.</p>\n<p><img src=\"/storage/app/media/4.0/Fog%20Volumes/Screenshot%20from%202022-06-30%2023-15-12.png\" alt=\"Less detailed light shafts at default settings\" /></p>\n<p>FogVolumes come with a built-in FogMaterial which allows users to quickly and easily set basic properties like, albedo (color), density, emission, and height falloff.</p>\n<p><img src=\"/storage/app/media/4.0/Fog%20Volumes/Screenshot%20from%202022-06-30%2023-17-36.png\" alt=\"Sponza scene with FogMaterial to customize the FogVolume behavior\" /></p>\n<p>Perhaps the most exciting part about FogVolumes is the introduction of the <code>fog</code> shader type. FogVolumes can be controlled with custom Fog shaders to add detail or to shape them however you want. For example, you can vary fog density according to an animated noise pattern.</p>\n<p><img src=\"/storage/app/media/4.0/Fog%20Volumes/Screenshot%20from%202022-06-30%2023-26-18.png\" alt=\"Fog density varied using an animated noise pattern in a fog shader\" /></p>\n<p><img src=\"/storage/app/media/4.0/Fog%20Volumes/Screenshot%20from%202022-06-30%2023-26-33.png\" alt=\"Fog density varied using an animated noise pattern in a fog shader\" /></p>\n<p>FogVolumes respond to lighting in real time, the exact same way that Volumetric Fog does.</p>\n<h2>Technical details</h2>\n<p>When starting to work on FogVolumes, we wanted to ensure that users could be creative with them without running into performance barriers. In particular, we wanted users to be able to have a large number of FogVolumes present in the scene without incurring a large performance penalty. Similarly, we wanted to allow users to combine and overlap FogVolumes without restriction.</p>\n<p>Volumetric Fog uses an optimized algorithm to calculate fog based on the approach described by Bart Wronski in his <a href=\"https://advances.realtimerendering.com/s2014/index.html\">2014 SIGGRAPH presentation</a> <em>&quot;Volumetric Fog: Unified Compute Shader-Based Solution To Atmospheric Scattering&quot;</em>.</p>\n<p>The Wronski approach to volumetric scattering is widely used by many engines, so we won't go into depth into it. The important thing to take away is that we calculate the volumetric lighting in a large 3-dimensional buffer called a &quot;froxel buffer&quot;. Froxels are <strong>fr</strong>ustum-aligned v<strong>oxels</strong>. Another way to think about it is grid-aligned and scaled with the camera's frustum. Therefore, cells close to the camera are quite small and the cells grow larger as they get further from the camera due to perspective projection. By default, we use a 64×64×64 froxel buffer, but this can be adjusted in the Project Settings. What makes the approach so fast is that you only calculate lighting for the cells in the froxel buffer and then, when drawing meshes, you only need to look up the fog value from the froxel buffer.</p>\n<p>To make rendering FogVolumes efficient, we render them to the froxel buffer used for Volumetric Fog instead of rendering each volume independently. </p>\n<p>This allows us to detach light rendering from FogVolume rendering and support huge numbers of lights, independent from the number of FogVolumes.</p>\n<video controls><source src=\"https://godotengine.org/storage/app/media/4.0/Fog%20Volumes/fog3.mp4\" type=\"video/mp4\"></source></video>\n<p>In doing so, we run into a small problem: accessing the same piece of memory on the GPU can result in problems with rendering. To resolve those problems, each rendering command needs to wait for the one before it to complete and you end up in a situation where your GPU spends most of its time waiting for more work instead of actually doing work. For only a few volumes that are spread apart, this isn't a problem. However, we want to be able to support scenes with hundreds of volumes or more!</p>\n<p>Let's take a step back to understand why it can be a problem to render multiple volumes at the same time by looking at a single froxel in the buffer.</p>\n<pre><code>density = 0</code></pre>\n<p>The <code>density</code> starts at 0.</p>\n<pre><code>// First, we draw a single primitive with a density of 1.\ndensity += 1\n\n// What the code is really doing is essentially:\ntemp = density\ndensity = temp + 1  // Density is now 1.</code></pre>\n<p>To add to density, we actually need to do three operations:</p>\n<ol>\n<li>copy the value of density,</li>\n<li>add 1 to our local copy of density, and</li>\n<li>write back that data to density.</li>\n</ol>\n<p>Let's look at what can happen if two volumes try to draw at the same time.</p>\n<pre><code>temp1 = density\ntemp2 = density  // Uh oh.\ndensity = temp1 + 1  // Density is 1.\ndensity = temp2 + 1  // Density is still 1.</code></pre>\n<p>What went wrong here is that one GPU operation overwrote the result of the other. In the end, the density of that cell ends up being half of what it should be. To the end user, this would look like a chunk of the scene with missing fog.</p>\n<p>We clearly need to do something to avoid this issue. One approach that many engines adopt is to render volumes using geometry shaders to generate and render slices. This works well because each &quot;slice&quot; of the volume can be rendered independently with &quot;additive&quot; blending directly into the target froxel buffer. Using additive blending in a fragment shader allows the GPU to draw the fog slices in a way where it doesn't matter in what order they are drawn. This allows the GPU to draw everything as fast as it can without waiting on other rendering operations.</p>\n<p>We wanted to avoid using geometry shaders as they are poorly supported on a lot of hardware, especially integrated graphics and mobile. Instead, we went with a different solution based on compute shaders. To avoid stalling the GPU between draw calls, we use atomic operations in the shader. Atomic operations are special versions of common operations (<code>add</code>, <code>or</code>, <code>min</code>, <code>max</code>) that can operate on the same memory without running into the problem described above. In our case, this allows the GPU to draw multiple volumes at the same time, and doesn't risk the volumes overwriting each other.</p>\n<p>In order to take advantage of atomic operations, we needed to make many changes to how we store the fog information. In particular, GLSL only supports atomic operations on integers. The values we are working with (density, albedo, emission) are all floating-point (and albedo and emission each contain 3 channels!). The first step was to encode the floating-point values into integers in a way where they could still be additively blended. In the end, we settled on using 3 textures the size of the froxel buffer each with a single 32 bit unsigned integer per cell.</p>\n<ul>\n<li><strong>Density</strong> is encoded as a signed 32-bit integer by multipling the floating-point density by 1024. This allows a range of -64 to 64 for density. In particular, the negative range is necessary to allow for subtracting volumes.</li>\n<li><strong>Albedo</strong> is encoded as a &quot;scattering&quot; which is to say that it is multiplied by density and clamped to the 0 to 1 range before being stored. Then, it's packed into 32 bits as follows: <code>uint(red * 2047.0) &lt;&lt; 21 | uint(green * 2047.0) &lt;&lt; 10 | uint(blue * 1023.0);</code>. This gives red and green twice as much precision as blue as they receive 11 bits each, while blue only receives 10 bits. Blue is the least visible color to the human eye, so red and green were chosen to receive higher precision.</li>\n<li><strong>Emission</strong> is encoded similarly to Albedo. We multiply it with density, but then we clamp to the 0 to 4 range. This way, emission is able to add a little bit of dynamic range. 4 was chosen as a reasonable range to allow some dynamic range but maintain some precision. The exact range can be adjusted at a later date based on user feedback.</li>\n</ul>\n<p>We use such simple linear scaling of values so that the fog properties can be simply added together in their unsigned integer format. If we used a non-linear encoding of values, we wouldn't be able to add them together without running into other artifacts.</p>\n<p>Using such a simple approach creates another interesting problem: individual color channels can overflow and bleed into their neighbors. A little bit of color bleeding is acceptable as it only impacts the least signfificant bit (for Albedo it would add <code>1 / 2043</code>, for Emission it would add <code>1 / 512</code>), but a color overflowing is a huge problem.</p>\n<p>Let's look at an example. Suppose one cell's blue albedo channel reached 1.0 (in binary: <code>11 1111 1111</code>), and then suppose another FogVolume overlaps that cell with a blue value of at least <code>0.00097</code> (in binary: <code>00 0000 0001</code>) after adding them, 1 bit will be added to green and blue will turn to <code>0.0</code> (in binary: <code>00 0000 0000</code>). This is, of course, a huge problem for us.</p>\n<p>The solution we settled on rests on one key behaviour of GLSL's <code>atomicAdd()</code> function. When adding a given value to value stored in memory, <code>atomicAdd()</code> is guaranteed to return the value of the memory immediated before the addition. Accordingly, we can replay the addition locally and check if any color channel overflows. If it does, we take the <code>atomicOr()</code> of that color channel with the same number of bits set to 1 to force it to its maximum value (1 in the case of Albedo, or 4 in the case of emission). Of course, the <code>atomicOr()</code> is only necessary when we detect an overflow.</p>\n<p>In practice, here's how that might look:</p>\n<pre><code>// Albedo from the current Fog Volume.\nnew_albedo = 0000 0000 000 0 0000 0010 00 00 1000 0101  // R = 0.0, G = 0.0039, B = 0.13\n\n// `current_albedo` is returned by our call to `atomicAdd()`.\ncurrent_albedo = 0011 1111 010 1 1111 1110 00 01 0011 1010  // R = 0.247; G = 0.9966; B = 0.307\n\n// Manually adding `new_albedo` to `current_albedo` in the shader (not using `atomicAdd()`).\nlocal_add = 0011 1111 011 0 000 0000 00 01 1011 1111  // R = 0.248; G = 0.0; B = 0.437\n\n// We detect that green is now lower than it was before; that's not supposed to happen.\n// So we create an overflow factor.\noverflow_factor = 0000 0000 000 1 1111 1111 11 00 0000 0000  // R = 0.0; G = 1.0; B = 0.0\n\n// We then call `atomicOr()` with the albedo and overflow factor to obtain a final result.\nfinal_albedo = 0011 1111 011 1 111 1111 11 01 1011 1111  // R = 0.248; G = 1.0; B = 0.437\n</code></pre>\n<p>While the results aren't perfect (we added too much red), the results are close enough and we are able to do this validation very quickly. On top of that, this avoids any memory synchronization issues as all the writes to albedo are done with atomic operations. There's a gap between the two atomic calls where other <code>atomicAdd()</code>s may modify the memory, but since we're essentially clamping the value with the overflow factor, we can trust that the other <code>atomicAdd()</code>s won't hurt anything.</p>\n<p>An alternative solution we explored (which was suggested to me by my brother while on a camping trip) was to add a padding bit between each color channel. In binary, our Albedo then looked like <code>RRRR RRRR RRPG GGGG GGGG GPBB BBBB BBBB</code>. This allowed us to avoid the problem of the single bit bleeding, as we could use an <code>atomicAdd()</code> to clear the padding bits, but it still required us to &quot;replay&quot; the addition to avoid the rest of the impact of the overflow. In the end, we decided keeping the extra bit of precision in the red and green channels was preferable to protecting ourselves against the overflow.</p>\n<p>Below is one of the test scenes I used while stress testing FogVolumes. It contains 96 simple volumes which each inject a little bit of density and color into a small area.</p>\n<p><img src=\"https://godotengine.org/storage/app/uploads/public/61e/37d/b0e/61e37db0efc8c802773538.png\" alt=\"96 volumes injecting density and color into a small area\" /></p>\n<p>Now for the interesting part. Below is a screen capture of a page from <a href=\"https://gpuopen.com/rgp/\">AMD Radeon GPU Profiler</a> showing a zoomed in section of the rendering frame. The top bars represent how much work the GPU is doing and the bottom bars show individual commands that have been sent to the GPU and how long they take.</p>\n<p><img src=\"https://godotengine.org/storage/app/uploads/public/61e/37d/be5/61e37dbe509c7803662265.png\" alt=\"Profiling of a volumetric fog rendering frame in AMD Radeon GPU Profiler\" /></p>\n<p>As you can see, the FogVolumes are mostly rendered at the same time, and even then, they can't saturate the GPU – of course this changes when using larger or more complex fog shaders. To the right, you can see that the lighting calculations are able to saturate the GPU and keep it busy.</p>\n<p>Overall, we're quite happy with the results and are confident that users will be too.</p>\n<p>That was just the tip of the iceberg. In adding FogVolumes, we overcame a few interesting technical challenges and faced a number of tradeoffs in designing a system we hope is fast, flexible, and friendly for users. For more details about the implementation, please see the <a href=\"https://github.com/godotengine/godot/pull/53353\">pull request on Github</a>.</p>\n<h2>Support</h2>\n<p>Godot is a non-profit, open source game engine developed by hundreds of contributors on their free time, and a handful of part or full-time developers, hired thanks to donations from the Godot community. A big thankyou to everyone who has contributed their time or financial support to the project!</p>\n<p>If you'd like to support the project financially and help us secure our future hires, you can do so on <a href=\"https://www.patreon.com/godotengine\">Patreon</a> or <a href=\"https://godotengine.org/donate\">PayPal</a>.</p>","contentSnippet":"Note: FogVolumes are available in 4.0 alpha 1 and later. This post provides a technical overview for a feature that is already available in the current 4.0 alphas.\nOn top of the existing non-volumetric fog, Godot 4.0 introduces a new type of fog: Volumetric Fog. For the 4.0 release, we decided to take Volumetric Fog one step further with the addition of FogVolumes. These allow users to dynamically place fog and control complex fog effects with shaders.\nThis post starts off with a high-level description of what FogVolumes are and how to use them, and then includes some technical details about what is going on under the hood and how we get them to render so fast.\n\nVolumetric fog\nVolumetric Fog uses a 3-dimensional buffer to calculate and store fog density values allowing fog to interact with light and shadows in a way that the previous non-volumetric fog never could. Volumetric Fog adds a new dimension of realism to 3D scenes. \nFor example, here is a view of Crytek's popular Sponza scene (well, popular among graphics developers).\n\nTurning on Volumetric Fog, we can instantly make it a little more interesting!\n\nAs you can see, Volumetric Fog responds to both light and shadow automatically. It also updates in real time! \n\nBy default, Volumetric Fog covers the entire scene with a uniform density, but sometimes specific effects call for having fog in only one portion of a scene (like in the above video). For that, you need FogVolumes.\nFogVolume nodes\nFogVolumes come in many different shapes, they can either be boxes, ellipsoids, cones, cylinders, or they can cover the whole world. Naturally, it is more efficient to use a box, ellipsoid, cone, or cylinder shape as they limit the region over which the fog is calculated.\nBy default, FogVolumes add fog into the scene. The fog model we use internally is based on density, albedo, and emission which are all additive properties. This means that when FogVolumes overlap, we need only add the density, albedo, and emission from the respective FogVolumes and the results will look correct.\nThe same goes for subtraction. You can use a negative density to subtract one volume from another to create more complex shapes if you need to, or if you need to keep fog from accumulating somewhere like in a house or other building.\n\nFogVolumes are 3D nodes that can be placed in the scene like other nodes and they immediately react to the existing lighting conditions and other objects in the scene. The only restriction is that Volumetric Fog must be enabled in the Environment for the FogVolumes to be visible.\nIf you wish to disable global volumetric fog but still want to have volumetric fog constrained within specific areas, enable Volumetric Fog and decrease its density to 0.0.\nPictured below is a FogVolume partially intersecting a light beam. As you can see, the beam of light penetrates through the volume in a plausible way.\n\nIf you crank up the detail (not recommended for performance reasons), you can acheive very sharp-looking light shafts in a constrained area. You can also choose to decrease the maximum volumetric fog rendering distance to improve volumetric fog detail without incurring a performance cost.\n\nAt the default settings, the light still looks plausible, but not nearly as detailed. On the bright side, at default settings, Volumetric Fog and FogVolumes are efficient even on integrated GPUs.\n\nFogVolumes come with a built-in FogMaterial which allows users to quickly and easily set basic properties like, albedo (color), density, emission, and height falloff.\n\nPerhaps the most exciting part about FogVolumes is the introduction of the fog shader type. FogVolumes can be controlled with custom Fog shaders to add detail or to shape them however you want. For example, you can vary fog density according to an animated noise pattern.\n\n\nFogVolumes respond to lighting in real time, the exact same way that Volumetric Fog does.\nTechnical details\nWhen starting to work on FogVolumes, we wanted to ensure that users could be creative with them without running into performance barriers. In particular, we wanted users to be able to have a large number of FogVolumes present in the scene without incurring a large performance penalty. Similarly, we wanted to allow users to combine and overlap FogVolumes without restriction.\nVolumetric Fog uses an optimized algorithm to calculate fog based on the approach described by Bart Wronski in his 2014 SIGGRAPH presentation \"Volumetric Fog: Unified Compute Shader-Based Solution To Atmospheric Scattering\".\nThe Wronski approach to volumetric scattering is widely used by many engines, so we won't go into depth into it. The important thing to take away is that we calculate the volumetric lighting in a large 3-dimensional buffer called a \"froxel buffer\". Froxels are frustum-aligned voxels. Another way to think about it is grid-aligned and scaled with the camera's frustum. Therefore, cells close to the camera are quite small and the cells grow larger as they get further from the camera due to perspective projection. By default, we use a 64×64×64 froxel buffer, but this can be adjusted in the Project Settings. What makes the approach so fast is that you only calculate lighting for the cells in the froxel buffer and then, when drawing meshes, you only need to look up the fog value from the froxel buffer.\nTo make rendering FogVolumes efficient, we render them to the froxel buffer used for Volumetric Fog instead of rendering each volume independently. \nThis allows us to detach light rendering from FogVolume rendering and support huge numbers of lights, independent from the number of FogVolumes.\n\nIn doing so, we run into a small problem: accessing the same piece of memory on the GPU can result in problems with rendering. To resolve those problems, each rendering command needs to wait for the one before it to complete and you end up in a situation where your GPU spends most of its time waiting for more work instead of actually doing work. For only a few volumes that are spread apart, this isn't a problem. However, we want to be able to support scenes with hundreds of volumes or more!\nLet's take a step back to understand why it can be a problem to render multiple volumes at the same time by looking at a single froxel in the buffer.\ndensity = 0\nThe density starts at 0.\n// First, we draw a single primitive with a density of 1.\ndensity += 1\n\n// What the code is really doing is essentially:\ntemp = density\ndensity = temp + 1  // Density is now 1.\nTo add to density, we actually need to do three operations:\ncopy the value of density,\nadd 1 to our local copy of density, and\nwrite back that data to density.\nLet's look at what can happen if two volumes try to draw at the same time.\ntemp1 = density\ntemp2 = density  // Uh oh.\ndensity = temp1 + 1  // Density is 1.\ndensity = temp2 + 1  // Density is still 1.\nWhat went wrong here is that one GPU operation overwrote the result of the other. In the end, the density of that cell ends up being half of what it should be. To the end user, this would look like a chunk of the scene with missing fog.\nWe clearly need to do something to avoid this issue. One approach that many engines adopt is to render volumes using geometry shaders to generate and render slices. This works well because each \"slice\" of the volume can be rendered independently with \"additive\" blending directly into the target froxel buffer. Using additive blending in a fragment shader allows the GPU to draw the fog slices in a way where it doesn't matter in what order they are drawn. This allows the GPU to draw everything as fast as it can without waiting on other rendering operations.\nWe wanted to avoid using geometry shaders as they are poorly supported on a lot of hardware, especially integrated graphics and mobile. Instead, we went with a different solution based on compute shaders. To avoid stalling the GPU between draw calls, we use atomic operations in the shader. Atomic operations are special versions of common operations (add, or, min, max) that can operate on the same memory without running into the problem described above. In our case, this allows the GPU to draw multiple volumes at the same time, and doesn't risk the volumes overwriting each other.\nIn order to take advantage of atomic operations, we needed to make many changes to how we store the fog information. In particular, GLSL only supports atomic operations on integers. The values we are working with (density, albedo, emission) are all floating-point (and albedo and emission each contain 3 channels!). The first step was to encode the floating-point values into integers in a way where they could still be additively blended. In the end, we settled on using 3 textures the size of the froxel buffer each with a single 32 bit unsigned integer per cell.\nDensity is encoded as a signed 32-bit integer by multipling the floating-point density by 1024. This allows a range of -64 to 64 for density. In particular, the negative range is necessary to allow for subtracting volumes.\nAlbedo is encoded as a \"scattering\" which is to say that it is multiplied by density and clamped to the 0 to 1 range before being stored. Then, it's packed into 32 bits as follows: uint(red * 2047.0) << 21 | uint(green * 2047.0) << 10 | uint(blue * 1023.0);. This gives red and green twice as much precision as blue as they receive 11 bits each, while blue only receives 10 bits. Blue is the least visible color to the human eye, so red and green were chosen to receive higher precision.\nEmission is encoded similarly to Albedo. We multiply it with density, but then we clamp to the 0 to 4 range. This way, emission is able to add a little bit of dynamic range. 4 was chosen as a reasonable range to allow some dynamic range but maintain some precision. The exact range can be adjusted at a later date based on user feedback.\nWe use such simple linear scaling of values so that the fog properties can be simply added together in their unsigned integer format. If we used a non-linear encoding of values, we wouldn't be able to add them together without running into other artifacts.\nUsing such a simple approach creates another interesting problem: individual color channels can overflow and bleed into their neighbors. A little bit of color bleeding is acceptable as it only impacts the least signfificant bit (for Albedo it would add 1 / 2043, for Emission it would add 1 / 512), but a color overflowing is a huge problem.\nLet's look at an example. Suppose one cell's blue albedo channel reached 1.0 (in binary: 11 1111 1111), and then suppose another FogVolume overlaps that cell with a blue value of at least 0.00097 (in binary: 00 0000 0001) after adding them, 1 bit will be added to green and blue will turn to 0.0 (in binary: 00 0000 0000). This is, of course, a huge problem for us.\nThe solution we settled on rests on one key behaviour of GLSL's atomicAdd() function. When adding a given value to value stored in memory, atomicAdd() is guaranteed to return the value of the memory immediated before the addition. Accordingly, we can replay the addition locally and check if any color channel overflows. If it does, we take the atomicOr() of that color channel with the same number of bits set to 1 to force it to its maximum value (1 in the case of Albedo, or 4 in the case of emission). Of course, the atomicOr() is only necessary when we detect an overflow.\nIn practice, here's how that might look:\n// Albedo from the current Fog Volume.\nnew_albedo = 0000 0000 000 0 0000 0010 00 00 1000 0101  // R = 0.0, G = 0.0039, B = 0.13\n\n// `current_albedo` is returned by our call to `atomicAdd()`.\ncurrent_albedo = 0011 1111 010 1 1111 1110 00 01 0011 1010  // R = 0.247; G = 0.9966; B = 0.307\n\n// Manually adding `new_albedo` to `current_albedo` in the shader (not using `atomicAdd()`).\nlocal_add = 0011 1111 011 0 000 0000 00 01 1011 1111  // R = 0.248; G = 0.0; B = 0.437\n\n// We detect that green is now lower than it was before; that's not supposed to happen.\n// So we create an overflow factor.\noverflow_factor = 0000 0000 000 1 1111 1111 11 00 0000 0000  // R = 0.0; G = 1.0; B = 0.0\n\n// We then call `atomicOr()` with the albedo and overflow factor to obtain a final result.\nfinal_albedo = 0011 1111 011 1 111 1111 11 01 1011 1111  // R = 0.248; G = 1.0; B = 0.437\n\nWhile the results aren't perfect (we added too much red), the results are close enough and we are able to do this validation very quickly. On top of that, this avoids any memory synchronization issues as all the writes to albedo are done with atomic operations. There's a gap between the two atomic calls where other atomicAdd()s may modify the memory, but since we're essentially clamping the value with the overflow factor, we can trust that the other atomicAdd()s won't hurt anything.\nAn alternative solution we explored (which was suggested to me by my brother while on a camping trip) was to add a padding bit between each color channel. In binary, our Albedo then looked like RRRR RRRR RRPG GGGG GGGG GPBB BBBB BBBB. This allowed us to avoid the problem of the single bit bleeding, as we could use an atomicAdd() to clear the padding bits, but it still required us to \"replay\" the addition to avoid the rest of the impact of the overflow. In the end, we decided keeping the extra bit of precision in the red and green channels was preferable to protecting ourselves against the overflow.\nBelow is one of the test scenes I used while stress testing FogVolumes. It contains 96 simple volumes which each inject a little bit of density and color into a small area.\n\nNow for the interesting part. Below is a screen capture of a page from AMD Radeon GPU Profiler showing a zoomed in section of the rendering frame. The top bars represent how much work the GPU is doing and the bottom bars show individual commands that have been sent to the GPU and how long they take.\n\nAs you can see, the FogVolumes are mostly rendered at the same time, and even then, they can't saturate the GPU – of course this changes when using larger or more complex fog shaders. To the right, you can see that the lighting calculations are able to saturate the GPU and keep it busy.\nOverall, we're quite happy with the results and are confident that users will be too.\nThat was just the tip of the iceberg. In adding FogVolumes, we overcame a few interesting technical challenges and faced a number of tradeoffs in designing a system we hope is fast, flexible, and friendly for users. For more details about the implementation, please see the pull request on Github.\nSupport\nGodot is a non-profit, open source game engine developed by hundreds of contributors on their free time, and a handful of part or full-time developers, hired thanks to donations from the Godot community. A big thankyou to everyone who has contributed their time or financial support to the project!\nIf you'd like to support the project financially and help us secure our future hires, you can do so on Patreon or PayPal.","guid":"https://godotengine.org/article/fog-volumes-arrive-in-godot-4","isoDate":"2022-07-06T09:00:00.000Z"}]}